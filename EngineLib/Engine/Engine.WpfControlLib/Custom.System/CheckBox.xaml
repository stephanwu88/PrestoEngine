<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="clr-namespace:Engine.WpfBase"
					xmlns:local="clr-namespace:Engine.WpfControl">
    
    <h:StringToVisible x:Key="StringToVisible"/>
    
    <!--面板式按钮 左右结构、圆角  左侧Content 右侧Detail-->
    <Style x:Key="S.CheckBox.Panel" TargetType="CheckBox">
        <!--备选颜色#4C81F7 #4EC9EE #FCB633 #FF93A4 #7D7EF8-->
        <Setter Property="Background" Value="#4C81F7"/>
        <Setter Property="BorderBrush" Value="Red"/>
        <Setter Property="Width" Value="70"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="h:Cattach.CornerRadius" Value="7"/>
        <!--<Setter Property="h:Cattach.Detail" Value=""/>-->
        <Setter Property="h:Cattach.LeftGridLength" Value="*"/>
        <Setter Property="h:Cattach.RightGridLength" Value="Auto"/>
        <Setter Property="h:Cattach.SelectBackground" Value="Yellow"/>
        <Setter Property="h:Cattach.SelectFontSize" Value="16"/>
        <Setter Property="h:Cattach.ContentMargin" Value="8 0"/>
        <Setter Property="h:Cattach.Orientation" Value="Horizontal"/>
        <!--图标部分(可不指定)-->
        <!--<Setter Property="h:Cattach.FIcon" Value=""/>-->
        <Setter Property="h:Cattach.FIconSize" Value="30"/>
        <Setter Property="h:Cattach.FIconMargin" Value="0 0 0 0"/>
        <!--标记(可不指定)-->
        <Setter Property="h:Cattach.MarkerPadding" Value="0"/>
        <Setter Property="h:Cattach.MarkerFontSize" Value="15"/>
        <Setter Property="h:Cattach.MarkerMaxWidth" Value="50"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Border x:Name="border" HorizontalAlignment="Left" VerticalAlignment="Center" CornerRadius="7" 
                                Height="{TemplateBinding Height}" 
                                Background="{TemplateBinding Background}"
                                Width="{TemplateBinding Width}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="0"
                                ClipToBounds="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{TemplateBinding h:Cattach.LeftGridLength}"/>
                                <ColumnDefinition Width="{TemplateBinding h:Cattach.RightGridLength}" 
                                                  MaxWidth="{TemplateBinding h:Cattach.MarkerMaxWidth}"/>
                            </Grid.ColumnDefinitions>
                            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center"
                                        Orientation="{TemplateBinding h:Cattach.Orientation}">
                                <TextBlock x:Name="icon" Text="{TemplateBinding h:Cattach.FIcon}" 
                                            Style="{DynamicResource S.TextBlock.IfNullCollapsed}"
                                            Foreground="{TemplateBinding Foreground}"
                                            FontFamily="{DynamicResource IconFont}"
                                            FontSize="{TemplateBinding h:Cattach.FIconSize}"
                                            Margin="{TemplateBinding h:Cattach.FIconMargin}"
                                            VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                <TextBlock x:Name="_txt" Grid.Column="0" Text="{TemplateBinding Content}" Padding="10 0 10 0" 
                                            Style="{DynamicResource S.TextBlock.IfNullCollapsed}"
                                            TextTrimming="CharacterEllipsis" FontWeight="Bold" 
                                            Margin="{TemplateBinding h:Cattach.ContentMargin}"
                                            VerticalAlignment="Center" HorizontalAlignment="Center"
                                            FontSize="{TemplateBinding FontSize}" 
                                            Foreground="{TemplateBinding Foreground}" Background="Transparent"/>
                            </StackPanel>
                            <!--左侧偏置点标记-->
                            <Border x:Name="_dot" Grid.Column="0" CornerRadius="10" Width="20" Height="20" HorizontalAlignment="Left" 
                                    Margin="-10" Background="White" Opacity="0.5"/>
                            
                            <Grid x:Name="marker" Grid.Column="1">
                                <Border CornerRadius="0 7 7 0" Background="White" Opacity="0.5"/>
                                <TextBlock Grid.Column="1" Text="{TemplateBinding h:Cattach.Detail}" 
                                               TextTrimming="CharacterEllipsis"
                                               Padding="{TemplateBinding h:Cattach.MarkerPadding}" 
                                               VerticalAlignment="Center" HorizontalAlignment="Center"
                                               FontSize="{TemplateBinding h:Cattach.MarkerFontSize}" 
                                               Foreground="White" Background="Transparent"/>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <!--<Setter TargetName="border" Property="BorderThickness" Value="5 0 0 0"/>-->
                            <Setter TargetName="_dot" Property="Background" Value="{Binding Path=(h:Cattach.SelectBackground),RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="_dot" Property="Opacity" Value="1"/>
                            <Setter TargetName="_txt" Property="Foreground" Value="{Binding Path=(h:Cattach.SelectBackground),RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="_txt" Property="FontSize" Value="{Binding Path=(h:Cattach.SelectFontSize),RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--圆形图标按钮 圆形 【右上角数字项】 -->
    <Style x:Key="S.CheckBox.Circle" TargetType="CheckBox">
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush>
                    <GradientStop Color="#14DFEA" Offset="0"/>
                    <GradientStop Color="#5190FA" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="40"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="h:Cattach.Detail" Value="0"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid>
                        <Ellipse Fill="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"/>
                        <TextBlock Text="{TemplateBinding Content}" Foreground="White" FontSize="{TemplateBinding FontSize}" 
                                   HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        <!--右上角数字显示-->
                        <!--Visibility="{TemplateBinding h:Cattach.Detail,Converter={StaticResource IntToVisible}}"-->
                        <Border x:Name="marker" Background="Red" HorizontalAlignment="Right" Margin="0 -5 0 0"
                                CornerRadius="10"  Opacity="0.9" 
                                MaxWidth="40" MinWidth="20"
                                VerticalAlignment="Top" Height="20">
                            <TextBlock x:Name="markertxt" Padding="5 0 5 0" Text="{TemplateBinding h:Cattach.Detail}" 
                                       TextTrimming="CharacterEllipsis" Foreground="White" FontSize="10" 
                                       HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#4C81F7"/>
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Height" To="50" Duration="0:0:0.2"/>
                                        <DoubleAnimation Storyboard.TargetProperty="Width" To="50" Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Height" To="40" Duration="0:0:0.2"/>
                                        <DoubleAnimation Storyboard.TargetProperty="Width" To="40" Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="#4C81F7"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=Text, ElementName=markertxt}" Value="">
                            <Setter TargetName="marker" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--图标+文字按钮 默认上下布局-->
    <Style x:Key="S.CheckBox.FIconText" TargetType="CheckBox">
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="#4C81F7"/>
        <Setter Property="Cursor" Value="Hand"/>
        <!--<Setter Property="h:Cattach.FIcon" Value=""/>-->
        <Setter Property="h:Cattach.FIconSize" Value="30"/>
        <Setter Property="h:Cattach.FIconMargin" Value="0 0 0 0"/>
        <Setter Property="h:Cattach.CornerRadius" Value="5"/>
        <Setter Property="h:Cattach.Orientation" Value="Vertical"/>
        <Setter Property="h:Cattach.ContentMargin" Value="0 0 0 0"/>
        <Setter Property="h:Cattach.ContentPadding" Value="0 0 0 0"/>
        <Setter Property="h:Cattach.MarkerMargin" Value="0 -6 0 0"/>
        <Setter Property="h:Cattach.MarkerWidth" Value="10"/>
        <Setter Property="h:Cattach.MarkerHeight" Value="10"/>
        <Setter Property="h:Cattach.MarkerCornerRadius" Value="5"/>
        <Setter Property="h:Cattach.MarkerBackground" Value="Red"/>
        <Setter Property="h:Cattach.ShowMarker" Value="True"/>
        <!--<Setter Property="h:Cattach.Detail" Value=""/>-->
        <Setter Property="h:Cattach.MouseOverOpacity" Value="0.7"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid>
                        <StackPanel x:Name="border" HorizontalAlignment="Center" VerticalAlignment="Center"
                                    Orientation="{TemplateBinding h:Cattach.Orientation}">
                            <TextBlock x:Name="icon" Text="{TemplateBinding h:Cattach.FIcon}" 
                                       Style="{DynamicResource S.TextBlock.IfNullCollapsed}"
                                       Foreground="{TemplateBinding Foreground}"
                                       FontFamily="{DynamicResource IconFont}"
                                       FontSize="{TemplateBinding h:Cattach.FIconSize}"
                                       Margin="{TemplateBinding h:Cattach.FIconMargin}"
                                       VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            <TextBlock x:Name="txt" Text="{TemplateBinding Content}" 
                                       Style="{DynamicResource S.TextBlock.IfNullCollapsed}"
                                       Margin="{TemplateBinding h:Cattach.ContentMargin}"
                                       Padding="{TemplateBinding h:Cattach.ContentPadding}"
                                       Foreground="{TemplateBinding Foreground}"
                                       FontSize="{TemplateBinding FontSize}"
                                       VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </StackPanel>
                        <Border x:Name="marker"
                                Visibility="{TemplateBinding h:Cattach.Detail,Converter={StaticResource StringToVisible},ConverterParameter='Len[>0]'}"
                                HorizontalAlignment="Right" VerticalAlignment="Top" 
                                Margin="{TemplateBinding h:Cattach.MarkerMargin}"
                                Background="{TemplateBinding h:Cattach.MarkerBackground}"
                                CornerRadius="{TemplateBinding h:Cattach.MarkerCornerRadius}"
                                MinWidth="{TemplateBinding h:Cattach.MarkerWidth}"
                                MaxWidth="{TemplateBinding Width}"
                                Height="{TemplateBinding h:Cattach.MarkerHeight}"
                                MaxHeight="{TemplateBinding Height}">
                            <TextBlock Text="{TemplateBinding h:Cattach.Detail}" Foreground="White"
                                       FontSize="12" TextTrimming="CharacterEllipsis"
                                       HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="h:Cattach.ShowMarker" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="marker" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Opacity" Value="{Binding Path=(h:Cattach.MouseOverOpacity),RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <!--<DataTrigger Binding="{Binding Content,RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                            <Setter TargetName="txt" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Content,RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                            <Setter TargetName="txt" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--图标+文字按钮 默认水平布局-->
    <Style x:Key="S.CheckBox.FIconText.Horizontal" TargetType="CheckBox" BasedOn="{StaticResource S.CheckBox.FIconText}">
        <Setter Property="h:Cattach.Orientation" Value="Horizontal"/>
        <Setter Property="h:Cattach.ContentPadding" Value="5 0 0 0"/>
        <Setter Property="h:Cattach.FIconSize" Value="21"/>
    </Style>

    <!--圆角方形-->
    <Style x:Key="S.CheckBox.Square" TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.Default}"/>
        <Setter Property="Padding" Value="3,0"/>
        <Setter Property="FontFamily" Value="{DynamicResource S.FontFamily.Default}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSize}"/>
        <Setter Property="BorderThickness" Value="0.5"/>
        <Setter Property="Height" Value="{DynamicResource S.Window.Item.Height}" />
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="BorderBrush" Value="{DynamicResource S.Brush.TextForeground.Default}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid Background="{TemplateBinding Background}" Margin="0">
                        <Border x:Name="_borderOver" Background="Transparent" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Margin="1"/>
                        <Border x:Name="_borderChecked" Visibility="Collapsed" Background="Yellow" HorizontalAlignment="Right" VerticalAlignment="Bottom" Width="20" Height="20">
                            <Path Data="M0,5 5,10 13,1" Margin="5 5 0 0" Stroke="Red" StrokeThickness="1"/>
                        </Border>
                        <TextBlock FontSize="{TemplateBinding FontSize}" Block.TextAlignment="Center" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="FocusVisualStyle">
                                <Setter.Value>
                                    <Style>
                                        <Setter Property="Control.Template">
                                            <Setter.Value>
                                                <ControlTemplate>
                                                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Setter.Value>
                            </Setter>

                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="_borderOver" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="_borderChecked" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--圆角方形-->
    <Style x:Key="S.CheckBox.Square2" TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.Default}"/>
        <Setter Property="Padding" Value="3,0"></Setter>
        <Setter Property="FontFamily" Value="{DynamicResource S.FontFamily.Default}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSize}"/>
        <Setter Property="BorderThickness" Value="0.5"/>
        <Setter Property="Height" Value="{DynamicResource S.Window.Item.Height}" />
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="BorderBrush" Value="{DynamicResource S.Brush.TextForeground.Default}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid Background="{TemplateBinding Background}" Margin="0">
                        <Border x:Name="_borderOver" Background="Transparent" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Margin="1"/>
                        <Border x:Name="_borderChecked" Visibility="Collapsed" Background="Transparent" HorizontalAlignment="Right" VerticalAlignment="Bottom" Width="20" Height="20">
                            <Path Data="M0,5 5,10 13,1" Margin="5 5 0 0" Stroke="Red" StrokeThickness="2"/>
                        </Border>
                        <TextBlock FontSize="{TemplateBinding FontSize}" Block.TextAlignment="Center" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="FocusVisualStyle">
                                <Setter.Value>
                                    <Style>
                                        <Setter Property="Control.Template">
                                            <Setter.Value>
                                                <ControlTemplate>
                                                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Setter.Value>
                            </Setter>

                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!--<Setter Property="BorderBrush" TargetName="_borderOver" Value="White"/>-->
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="_borderChecked" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--变色块-->
    <Style x:Key="S.CheckBox.ChangedColorBar" TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Height" Value="{DynamicResource S.Window.Item.Height}" />
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="BorderBrush" Value="{DynamicResource S.Brush.TextForeground.Default}" />
        <Setter Property="FontSize" Value="14"></Setter>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="5,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="32"></ColumnDefinition>
                            <ColumnDefinition Width="auto"></ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="bd" Grid.Column="0" CornerRadius="4" Width="22" Height="22" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"></Border>
                        <ContentPresenter Grid.Column="1" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}"></ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="bd" Property="Background" Value="Green"></Setter>
                            <Setter TargetName="bd" Property="BorderBrush" Value="Green"></Setter>
                            <Setter Property="Foreground" Value="#FFDDDDDD"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--带图片勾选-->
    <Style x:Key="S.CheckBox.ImageText" TargetType="{x:Type CheckBox}">
        <!--<Setter Property="h:Cattach.UnSelectedImage" Value=""/>
        <Setter Property="h:Cattach.SelectedImage" Value=""/>-->
        <!--<Setter Property="h:Cattach.ContentMargin" Value=""/>-->
        <Setter Property="h:Cattach.Orientation" Value="Vertical"/>
        <Setter Property="h:Cattach.ImageMargin" Value="0"/>
        <Setter Property="h:Cattach.ImageHeight" Value="30"/>
        <Setter Property="h:Cattach.ImageWidth" Value="30"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <StackPanel Orientation="{TemplateBinding h:Cattach.Orientation}">
                        <Grid >
                            <Grid>
                                <Image x:Name="unselectedimg" Source="{TemplateBinding h:Cattach.UnSelectedImage}" 
                                       Margin="{TemplateBinding h:Cattach.ImageMargin}" Stretch="Fill"
                                       Height="{TemplateBinding h:Cattach.ImageHeight}" Width="{TemplateBinding h:Cattach.ImageWidth}"/>
                                <Image x:Name="selectedimg" Source="{TemplateBinding h:Cattach.SelectedImage}"
                                       Margin="{TemplateBinding h:Cattach.ImageMargin}" Stretch="Fill"
                                       Height="{TemplateBinding h:Cattach.ImageHeight}" Width="{TemplateBinding h:Cattach.ImageWidth}"/>
                            </Grid>
                        </Grid>
                        <TextBlock Text="{TemplateBinding Content}" 
                                   Style="{DynamicResource ResourceKey=S.TextBlock.IfNullCollapsed}"
                                   HorizontalAlignment="Center" VerticalAlignment="Center"
                                   FontSize="{TemplateBinding FontSize}" 
                                   FontFamily="{TemplateBinding FontFamily}"
                                   FontWeight="{TemplateBinding FontWeight}"
                                   Margin="{TemplateBinding h:Cattach.ContentMargin}"
                                   Foreground="{TemplateBinding Foreground}"/>
                    </StackPanel>

                    <ControlTemplate.Triggers >
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="selectedimg" Property="Visibility" Value="Visible" />
                            <Setter TargetName="unselectedimg" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="selectedimg" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="unselectedimg" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--???-->
    <Style x:Key="S.CheckBox.Default" TargetType="{x:Type CheckBox}">
        <Setter Property="RenderTransform" Value="{StaticResource S.TransformGroup.Default}"/>
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.Default}"/>
        <Setter Property="FontFamily" Value="{DynamicResource  S.FontFamily.Default}" />
        <Setter Property="Padding" Value="0"/>
        <!--<Setter Property="Height" Value="{DynamicResource S.Window.Item.Height}" />-->
        <Setter Property="h:Cattach.FIconMargin" Value="1,1,10,1"/>
        <Setter Property="h:Cattach.FIconSize" Value="{DynamicResource S.FIcon.Size.Default}"/>
        <Setter Property="FontSize" Value="{DynamicResource S.FontSize.Default}"/>

        <Setter Property="h:Cattach.TitleForeground" Value="{DynamicResource S.Brush.TextForeground.Default}"/>
        <Setter Property="h:Cattach.TitleMargin" Value="{DynamicResource S.Thickness.Margin.10.0}"/>
        <Setter Property="h:Cattach.TitleWidth" Value="{DynamicResource S.Window.Title.Width}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="grid" Margin="{TemplateBinding Padding}" VerticalAlignment="Center">
                        <StackPanel Grid.Column="2" Orientation="Horizontal" VerticalAlignment="Center">
                            <TextBlock  x:Name="icon" Style="{DynamicResource S.TextBlock.FIcon}" Text="&#xe6ac;"
                                        FontSize="{TemplateBinding h:Cattach.FIconSize}"
                                        Margin="{TemplateBinding h:Cattach.FIconMargin}"
                                        Foreground="{TemplateBinding Foreground}"/>
                            <ContentPresenter VerticalAlignment="Center"/>
                        </StackPanel>
                    </Grid>
                    <!--触发器：设置选中状态符号-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Text" Value="&#xe624;" TargetName="icon" ></Setter>
                            <Setter Property="Foreground" Value="{DynamicResource S.Brush.Accent}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Text" Value="&#xe62b;" TargetName="icon" ></Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource S.Brush.Accent}"></Setter>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.98" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.98" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{DynamicResource S.Opacity.Disable}" TargetName="grid" ></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--???-->
    <Style x:Key="S.CheckBox.Single" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource S.CheckBox.Default}">
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.Default}"></Setter>
        <Setter Property="FontFamily" Value="{DynamicResource  S.FontFamily.Default}" />
        <Setter Property="Height" Value="{DynamicResource S.Window.Item.Height}" />
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"></Setter>
        <Setter Property="h:Cattach.FIconMargin" Value="1,1,10,1"></Setter>
        <Setter Property="h:Cattach.FIconSize" Value="{DynamicResource S.FIcon.Size.Large}"/>
        <Setter Property="FontSize" Value="{DynamicResource S.FontSize.Default}"/>
        <Setter Property="h:Cattach.UnSelectedText" Value="&#xe843;"/>
        <Setter Property="h:Cattach.SelectedText" Value="&#xe841;"/>
        <Setter Property="h:Cattach.SelectForeground" Value="{DynamicResource S.Brush.Accent}"/>
        <Setter Property="h:Cattach.FIcon" Value="&#xe842;"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">

                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <!--Label区域-->
                        <ContentControl x:Name="Label" 
                                            Template="{TemplateBinding h:Cattach.LabelTemplate}" 
                                            IsTabStop="False" IsHitTestVisible="False" 
                                            Background="{TemplateBinding BorderBrush}"
                                            Content="{TemplateBinding h:Cattach.Label}" 
                                            Margin="1,1,0,1"/>

                        <!--<TextBlock x:Name="ficon" Style="{DynamicResource S.TextBlock.FIcon}" HorizontalAlignment="Center"  Foreground="{TemplateBinding Foreground}"
                                       VerticalAlignment="Center" Grid.Column="1" 
                                       FontSize="{TemplateBinding h:Cattach.FIconSize}"
                                       Margin="{TemplateBinding h:Cattach.FIconMargin}" 
                                       Text="{TemplateBinding h:Cattach.FIcon}"/>-->

                        <TextBlock  x:Name="icon" Grid.Column="2" Style="{DynamicResource S.TextBlock.FIcon}" Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(h:Cattach.UnSelectedText) }" 
                                FontSize="{TemplateBinding h:Cattach.FIconSize}"
                                RenderTransform="{StaticResource S.TransformGroup.Default}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                RenderTransformOrigin="0.5,0.5"  
                                Foreground="{TemplateBinding Foreground}"/>

                    </Grid>


                    <!--触发器：设置选中状态符号-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Text" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=(h:Cattach.SelectedText)}" TargetName="icon"/>
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=(h:Cattach.SelectForeground)}"  TargetName="icon"/>
                        </Trigger>

                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Text" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=(h:Cattach.UnSelectedText)}" TargetName="icon"/>
                        </Trigger>

                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Text" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=(h:Cattach.UnSelectedText)}" TargetName="icon"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource S.Brush.Accent.MouseOver}"></Setter>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="icon">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.55" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"  Storyboard.TargetName="icon">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.55" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"   Storyboard.TargetName="icon">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"   Storyboard.TargetName="icon">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{DynamicResource S.Opacity.Disable}" TargetName="icon" ></Setter>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--???-->
    <Style x:Key="S.CheckBox.Single.Label" TargetType="{x:Type CheckBox}"  BasedOn="{StaticResource S.CheckBox.Single}">
        <Setter Property="h:Cattach.UnSelectedText" Value="&#xec49;"/>
        <Setter Property="h:Cattach.SelectedText" Value="&#xec4a;"/>
        <Setter Property="h:Cattach.FIconSize" Value="25"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="{DynamicResource S.Thickness.Margin.10.0}"/>
        <Setter Property="h:Cattach.TitleForeground" Value="{DynamicResource S.Brush.TextForeground.Default}"/>
        <Setter Property="h:Cattach.LabelTemplate" >
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border  Width="{Binding RelativeSource={RelativeSource AncestorType=CheckBox},Path=(h:Cattach.TitleWidth)}"  
                             Margin="{Binding RelativeSource={RelativeSource AncestorType=CheckBox},Path=(h:Cattach.TitleMargin)}">
                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Left"
                                   Foreground="{Binding RelativeSource={RelativeSource AncestorType=CheckBox},Path=(h:Cattach.TitleForeground)}" 
                                   Text="{TemplateBinding Content}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>