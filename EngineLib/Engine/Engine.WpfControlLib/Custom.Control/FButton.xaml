<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="QQ:178876839"
                    xmlns:local="clr-namespace:Engine.WpfControl">

    <!--FButton模板-->
    <ControlTemplate x:Key="S.FButton.Template.Default" TargetType="{x:Type local:FButton}">
        <Grid >
            <Border x:Name="border" Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Background}"
                                    Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Height}" Opacity="{TemplateBinding Opacity}"
                                    CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CornerRadius}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                    Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Width}">
            </Border>

            <Grid x:Name="grid" RenderTransformOrigin="0.5,0.5">
                <Grid.LayoutTransform>
                    <TransformGroup>
                        <ScaleTransform x:Name="grid_scale" ScaleX="1" ScaleY="1" />
                    </TransformGroup>
                </Grid.LayoutTransform>
                
                <!--Icon/Text-->
                <StackPanel Orientation="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=Orientation}" VerticalAlignment="Center" 
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">

                    <TextBlock x:Name="icon"  Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FIconMargin}" 
                           RenderTransformOrigin="0.5,0.5" Style="{DynamicResource S.TextBlock.FIcon}"
                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= FIcon}"
                           FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= FIconSize}" 
                           Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Foreground}" 
                           FontWeight="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= IconFontWeight}" 
                           HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TextBlock.RenderTransform>
                            <RotateTransform x:Name="transIcon" Angle="0"/>
                        </TextBlock.RenderTransform>
                    </TextBlock>

                    <Label  x:Name="txt" VerticalAlignment="Center" Content="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" FontSize="{TemplateBinding FontSize}"
                           Foreground="{TemplateBinding Foreground}"/>

                    <!--<TextBlock VerticalAlignment="Center"  x:Name="txt" 
                           TextDecorations="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ContentDecorations}" 
                                               Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" 
                                               FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FontSize}" 
                                               Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"
                           HorizontalAlignment="Center" />-->
                </StackPanel>
            </Grid>

            <ProgressBar  Background="Transparent"  Foreground="{DynamicResource S.Brush.TextBackground.Default}"
                          Opacity="0.5"    Height="Auto"
                          Visibility="{TemplateBinding h:Cattach.IsBuzy,Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}" 
                          BorderBrush="Transparent"  
                          IsIndeterminate="True"
                          BorderThickness="0">

                <ProgressBar.Clip>
                    <RectangleGeometry  RadiusX="{TemplateBinding h:Cattach.CornerRadius}" RadiusY="{TemplateBinding h:Cattach.CornerRadius}">
                        <RectangleGeometry.Rect>
                            <Rect Width="280" Height="52"/>
                        </RectangleGeometry.Rect>
                    </RectangleGeometry>
                </ProgressBar.Clip>
            </ProgressBar>

        </Grid>
        <!--</Border>-->
        <!--触发器-->
        <ControlTemplate.Triggers>
            <!--设置鼠标进入时的背景、前景样式-->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=MouseOverBackground}" TargetName="border" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=MouseOverBorderBrush}" TargetName="border" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=MouseOverForeground}" TargetName="icon"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=MouseOverForeground}"  TargetName="txt"/>

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity" To="0.8" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <!--Ficon的动画触发器-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true"></Condition>
                    <Condition Property="AllowsAnimation" Value="true"></Condition>
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="180" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="0" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>

            <!--鼠标按下时的前景、背景样式-->
            <Trigger Property="IsPressed" Value="True">
                <!--<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedBackground}" TargetName="border" />-->
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=PressedBorderBrush}" TargetName="border" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=PressedForeground}" TargetName="icon"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=PressedForeground}"  TargetName="txt"/>
                <!--<Setter Property="Margin" Value="0,3,0,0" TargetName="grid"/>-->

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"  Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"   Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"   Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="{DynamicResource S.Opacity.Disable}"/>
            </Trigger>

            <Trigger Property="h:Cattach.IsBuzy" Value="true">
                <Setter Property="Content" Value="{Binding Path=(h:Cattach.BuzyText),RelativeSource={RelativeSource TemplatedParent}}" TargetName="txt"/>
                <Setter Property="IsEnabled" Value="False"/>
            </Trigger>

            <Trigger Property="Content" Value="">
                <Setter Property="Visibility" Value="Collapsed" TargetName="txt"/>
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <Setter Property="Visibility" Value="Collapsed" TargetName="txt"/>
            </Trigger> 

            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Background" Value="{DynamicResource S.Brush.Accent}" TargetName="border" />
                <Setter Property="Foreground" Value="{DynamicResource S.Brush.White.Notice}" TargetName="icon"/>
                <Setter Property="Foreground" Value="{DynamicResource S.Brush.White.Notice}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--默认按钮样式-->
    <Style x:Key="S.FButton.Style.Default" TargetType="{x:Type local:FButton}">
        <Setter Property="Background" Value="{DynamicResource S.Brush.Accent}" />
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.White}" />
        <Setter Property="MouseOverBackground" Value="{DynamicResource S.Brush.Accent}" />
        <Setter Property="MouseOverForeground" Value="{DynamicResource S.Brush.TextForeground.White}" />
        <Setter Property="PressedBackground" Value="{DynamicResource S.Brush.Accent.Opacity.5}" />
        <Setter Property="PressedForeground" Value="{DynamicResource S.Brush.TextForeground.White}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="120" />
        <Setter Property="Height" Value="{DynamicResource S.Window.Item.Height}" />
        <Setter Property="CornerRadius" Value="{DynamicResource S.Window.Item.CornerRadius}" />
        <Setter Property="FIconSize" Value="20" />
        <Setter Property="Template" Value="{StaticResource S.FButton.Template.Default}"/>
        <Setter Property="Padding" Value="3,1,3,1" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="FIconMargin" Value="0" />
        <Setter Property="FIcon" Value="" />
        <Setter Property="AllowsAnimation" Value="False" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontSize" Value="{DynamicResource S.FontSize.Default}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <!--<Setter Property="Background">
            <Setter.Value>
                -->
        <!--Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Background}"-->
        <!--
                <LinearGradientBrush StartPoint="0 0" EndPoint="0 1">
                    <GradientStop Color="{DynamicResource AccentColor}" Offset="0" />
                    <GradientStop Color="White" Offset="0.2"/>
                    <GradientStop Color="{DynamicResource AccentColor}" Offset="1" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>-->
    </Style>
    
    <!--默认样式-->
    <Style TargetType="{x:Type local:FButton}" BasedOn="{StaticResource S.FButton.Style.Default}"/>

    <!--默认按钮 - 带图标-->
    <Style x:Key="S.FButton.Style.FIcon" TargetType="{x:Type local:FButton}" BasedOn="{StaticResource S.FButton.Style.Default}">
        <Setter Property="FIconMargin" Value="0,0,5,0" />
    </Style>
    
    <!--透明按钮-->
    <Style x:Key="S.FButton.Style.Transparent" TargetType="{x:Type local:FButton}" BasedOn="{StaticResource S.FButton.Style.Default}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MouseOverBackground" Value="Transparent" />
        <Setter Property="PressedBackground" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.Default}" />
        <Setter Property="MouseOverForeground" Value="{DynamicResource S.Brush.Accent}" />
        <Setter Property="MouseOverBorderBrush" Value="{DynamicResource S.Brush.Accent.MouseOver}"/>
        <Setter Property="PressedForeground" Value="{DynamicResource S.Brush.Accent.MouseOver}" />
        <!--<Setter Property="Height" Value="Auto"/>-->
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="FIconMargin" Value="0" />
    </Style>

    <!--超链接按钮-->
    <Style x:Key="S.FButton.Style.Link" TargetType="{x:Type local:FButton}" BasedOn="{StaticResource S.FButton.Style.Default}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MouseOverBackground" Value="Transparent" />
        <Setter Property="PressedBackground" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.Default}" />
        <Setter Property="MouseOverForeground" Value="{DynamicResource S.Brush.Accent}" />
        <Setter Property="PressedForeground" Value="{DynamicResource S.Brush.Accent.MouseOver}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="CornerRadius" Value="{DynamicResource S.Window.Item.CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource S.FontSize.Default}" />
        <Setter Property="FIconSize" Value="20" />
        <Setter Property="Template" Value="{StaticResource S.FButton.Template.Default}"/>
        <Setter Property="Padding" Value="3,1,3,1" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="FIconMargin" Value="0" />
        <Setter Property="FIcon" Value="" />
        <Setter Property="AllowsAnimation" Value="False" />
        <Setter Property="ContentDecorations" Value="Underline" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontSize" Value="{DynamicResource S.FontSize.Default}" />
    </Style>

    <!--圆形按钮-->
    <Style x:Key="S.FButton.Style.Circle" TargetType="{x:Type local:FButton}" BasedOn="{StaticResource S.FButton.Style.Default}">
        <Setter Property="Width"  Value="{DynamicResource S.Window.Item.Height}" />
        <Setter Property="Height"  Value="{DynamicResource S.Window.Item.Height}" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="CornerRadius" Value="{DynamicResource S.Window.Item.CornerRadius}" />
        <Setter Property="FIconSize" Value="20" />
        <Setter Property="FIconMargin" Value="0,0,0,0" />
    </Style>

    <!--圆形透明安妮-->
    <Style x:Key="S.FButton.Style.CircleTransparent" TargetType="{x:Type local:FButton}" BasedOn="{StaticResource S.FButton.Style.Default}">
        <Setter Property="Width"  Value="{DynamicResource S.Window.Item.Height}" />
        <Setter Property="Height"  Value="{DynamicResource S.Window.Item.Height}" />
        <Setter Property="FontSize" Value="{DynamicResource S.FontSize.Default}" />
        <Setter Property="CornerRadius" Value="{DynamicResource S.Window.Item.CornerRadius}" />
        <Setter Property="FIconSize" Value="20" />
        <Setter Property="BorderBrush" Value="{DynamicResource S.Brush.Accent}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="FIconMargin" Value="0,0,0,0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.Accent}" />
        <Setter Property="MouseOverBackground" Value="{DynamicResource S.Brush.Accent}" />
        <Setter Property="MouseOverForeground" Value="{DynamicResource S.Brush.White.Notice}" />
        <Setter Property="PressedBackground" Value="{DynamicResource S.Brush.Accent.Opacity.5}" />
        <Setter Property="PressedForeground" Value="{DynamicResource S.Brush.White.Notice}" />
    </Style>

    <!--圆角按钮-->
    <Style x:Key="S.FButton.Transparent.BorderBrush" TargetType="{x:Type local:FButton}" BasedOn="{StaticResource S.FButton.Style.Transparent}">
        <Setter Property="CornerRadius" Value="2" />
        <Setter Property="FIconSize" Value="20" />
        <Setter Property="FIconMargin" Value="0,0,0,0" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource S.Brush.TextBorderBrush.Default}"/>
        <Setter Property="MouseOverBorderBrush" Value="{DynamicResource S.Brush.Accent.MouseOver}"/>
        <Setter Property="PressedBorderBrush" Value="{DynamicResource S.Brush.Gray.Notice}"/>
    </Style>

    <!--圆角按钮-->
    <Style x:Key="S.FButton.Circle.CornerRadius" TargetType="{x:Type local:FButton}" BasedOn="{StaticResource S.FButton.Style.Default}">
        <Setter Property="FontSize" Value="{DynamicResource S.FontSize.Default}" />
        <Setter Property="CornerRadius" Value="{DynamicResource S.Window.Item.CornerRadius}" />
        <Setter Property="FIconSize" Value="20" />
        <Setter Property="FIconMargin" Value="0,0,0,0"/>
    </Style>

    <!--圆角透明按钮-->
    <Style x:Key="S.FButton.Circle.CornerRadius.Transparent" TargetType="{x:Type local:FButton}" BasedOn="{StaticResource S.FButton.Transparent.BorderBrush}">
        <Setter Property="CornerRadius"  Value="{DynamicResource S.Window.Item.CornerRadius}" />
    </Style>

    <!--圆形鼠标MouseOver显示按钮-->
    <!--矢量图标按钮默认模板-->
    <ControlTemplate x:Key="S.FButton.Template.FIcon" TargetType="{x:Type local:FButton}">
        <Grid >
            <Border x:Name="border" Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Background}" 
                                    Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Height}" Opacity="{TemplateBinding Opacity}"
                                    CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CornerRadius}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                    Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Width}"/>

            <Grid  x:Name="grid">
                <Grid.LayoutTransform>
                    <TransformGroup>
                        <ScaleTransform x:Name="grid_scale" ScaleX="1" ScaleY="1" />
                    </TransformGroup>
                </Grid.LayoutTransform>
                <!--Icon/Text-->
                <StackPanel Orientation="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=Orientation}" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">

                    <TextBlock x:Name="icon"  Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FIconMargin}" 
                           RenderTransformOrigin="0.5,0.5" Style="{DynamicResource S.TextBlock.FIcon}"
                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= FIcon}"
                           FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= FIconSize}" 
                           Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Foreground}" 
                           FontWeight="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= IconFontWeight}" 
                           HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TextBlock.RenderTransform>
                            <RotateTransform x:Name="transIcon" Angle="0"/>
                        </TextBlock.RenderTransform>
                    </TextBlock>

                    <!--<TextBlock VerticalAlignment="Center"  x:Name="txt" 
                           TextDecorations="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ContentDecorations}" 
                                               Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" 
                                               FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FontSize}" 
                                               Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"
                           HorizontalAlignment="Center" />-->
                </StackPanel>
            </Grid>

            <ProgressBar  Background="Transparent"  Opacity="0.5" Visibility="{TemplateBinding h:Cattach.IsBuzy,Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}" 
                                     BorderBrush="Transparent"  IsIndeterminate="True"
                                     BorderThickness="0">
                <ProgressBar.Clip>
                    <RectangleGeometry  RadiusX="{TemplateBinding h:Cattach.CornerRadius}" RadiusY="{TemplateBinding h:Cattach.CornerRadius}">
                        <RectangleGeometry.Rect>
                            <Rect Width="280" Height="52"/>
                        </RectangleGeometry.Rect>
                    </RectangleGeometry>
                </ProgressBar.Clip>
            </ProgressBar>

        </Grid>

        <ControlTemplate.Triggers>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverBackground}" TargetName="border" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}" TargetName="icon"/>

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.5" />

                            <DoubleAnimation Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Duration="0:0:0.2"  Storyboard.TargetName="grid" To="1.2"/>
                            <DoubleAnimation Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Duration="0:0:0.2"  Storyboard.TargetName="grid" To="1.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.5" />

                            <DoubleAnimation Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Duration="0:0:0.2"  Storyboard.TargetName="grid" To="1"/>
                            <DoubleAnimation Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Duration="0:0:0.2"  Storyboard.TargetName="grid" To="1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true"></Condition>
                    <Condition Property="AllowsAnimation" Value="true"></Condition>
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="180" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="0" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="icon"/>
                <!--<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="txt"/>-->

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"  Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"   Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"   Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>


            <Trigger Property="h:Cattach.IsBuzy" Value="true">

                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedBackground}" TargetName="border" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="icon"/>
                <!--<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="txt"/>-->

                <!--<Setter Property="Text" Value="{Binding Path=(h:Cattach.BuzyText),RelativeSource={RelativeSource TemplatedParent}}" TargetName="txt"/>-->

                <Setter Property="IsEnabled" Value="False"/>

            </Trigger>

            <Trigger Property="IsChecked" Value="true">

                <Setter Property="Background" Value="{DynamicResource S.Brush.Accent}" TargetName="border" />

                <Setter Property="Foreground" Value="{DynamicResource S.Brush.White.Notice}" TargetName="icon"/>

                <Setter Property="Opacity" Value="1"/>

                <!--<Setter Property="Foreground" Value="{DynamicResource S.Brush.White.Notice}" TargetName="txt"/>-->

                <!--<Setter Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content,Converter={x:Static local:XConverter.SelectTextConverter}}" TargetName="txt"/>-->
            </Trigger>

            <Trigger Property="IsEnabled" Value="false">

                <Setter Property="Opacity" Value="0.5" TargetName="border"/>

                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedBackground}" TargetName="border" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="icon"/>
                <!--<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="txt"/>-->

            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--平时隐藏 MouseOver显示-->
    <Style x:Key="S.FButton.Style.MouseOverOpacity" TargetType="{x:Type local:FButton}">
        <Setter Property="Background" Value="{DynamicResource S.Brush.Black.Notice}" />
        <Setter Property="MouseOverForeground"  Value="{DynamicResource S.Brush.White.Notice}"/>
        <Setter Property="MouseOverBackground"  Value="{DynamicResource S.Brush.Accent}"/>
        <Setter Property="PressedBackground" Value="{DynamicResource S.Brush.Accent}" />
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.White}" />
        <!--<Setter Property="MouseOverForeground" Value="{StaticResource S.Brush.Accent}" />-->
        <Setter Property="PressedForeground" Value="{DynamicResource S.Brush.Gray.Notice}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="{DynamicResource S.Window.Row.Height}"/>
        <Setter Property="Height" Value="{DynamicResource S.Window.Row.Height}" />
        <Setter Property="Opacity" Value="0.4" />
        <Setter Property="FontSize" Value="{DynamicResource S.FontSize.Default}" />
        <Setter Property="CornerRadius"  Value="50"  />
        <Setter Property="FIconSize" Value="20" />
        <Setter Property="Template" Value="{StaticResource S.FButton.Template.FIcon}"/>
        <Setter Property="Padding" Value="5" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="FIconMargin" Value="0,0,0,0" />
        <Setter Property="Margin" Value="0,2,0,0" />
        <Setter Property="AllowsAnimation" Value="False" />
        <Setter Property="Orientation" Value="Vertical"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="IconFontWeight" Value="Normal"/>
    </Style>


    <!--<local:FButton x:Name="btnClose" Width="{DynamicResource S.Window.Item.Height}" Margin="10,0" FIconSize="15" Foreground="{DynamicResource S.Brush.TextForeground.White}"
                         MouseOverBackground="Red" MouseOverForeground="{DynamicResource S.Brush.TextForeground.White}"  PressedForeground="{DynamicResource S.Brush.TextForeground.White}"
                         AllowsAnimation="True"  FIcon="&#xe6f4;" Style="{DynamicResource S.FButton.Style.Transparent}"
                         Command="{Binding Path=CloseWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>-->
    
    <Style x:Key="S.FButton.Close"  TargetType="{x:Type local:FButton}" BasedOn="{StaticResource S.FButton.Style.Transparent}">
        <Setter Property="Width" Value="{DynamicResource S.Window.Item.Height}"/>
        <!--<Setter Property="MouseOverBackground" Value="{DynamicResource S.Brush.Red.Notice}"/>
        <Setter Property="MouseOverForeground" Value="{DynamicResource S.Brush.TextForeground.White}"/>-->
        <Setter Property="FIcon" Value="&#xe6f4;"/>
        <Setter Property="AllowsAnimation" Value="True"/>
        <Setter Property="FIconSize" Value="16"/>
        <Setter Property="FIconMargin" Value="0"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Margin" Value="2"/>
        <!--<Setter Property="PressedBackground" Value="{DynamicResource S.Brush.TextForeground.Default}"/>
        <Setter Property="PressedForeground" Value="{DynamicResource S.Brush.TextForeground.White}"/>-->
    </Style>

    <Style x:Key="S.FButton.Left" TargetType="local:FButton" BasedOn="{StaticResource S.FButton.Style.MouseOverOpacity}">
        <Setter Property="Height" Value="150"/>
        <Setter Property="Width" Value="50"/>
        <Setter Property="FIconSize" Value="55"/>
        <Setter Property="Margin" Value="20,0"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FIcon" Value="&#xe9be;"/>
        <!--<Setter Property="Command" Value="{x:Static h:CommandService.Prev}"/>-->
    </Style>

    <Style x:Key="S.FButton.Right" TargetType="local:FButton" BasedOn="{StaticResource S.FButton.Style.MouseOverOpacity}">
        <Setter Property="Height" Value="150"/>
        <Setter Property="Width" Value="50"/>
        <Setter Property="FIconSize" Value="55"/>
        <Setter Property="Margin" Value="20,0"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="FIcon" Value="&#xe9bf;"/>
        <!--<Setter Property="Command" Value="{x:Static h:CommandService.Next}"/>-->
    </Style>
</ResourceDictionary>
