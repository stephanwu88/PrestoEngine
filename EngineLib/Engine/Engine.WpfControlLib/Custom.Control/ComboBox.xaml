<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                     xmlns:local="clr-namespace:Engine.WpfBase">
    <!--下拉条目样式-->
    <Style x:Key="S.ComboBoxItem.Default" TargetType="ComboBoxItem" >
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="MinHeight" Value="28" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource AncestorType=ComboBox},Path=Height}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="local:Cattach.CornerRadius" Value="{DynamicResource S.Window.Item.CornerRadius}"/>

        <Setter Property="local:Cattach.MouseOverBackground" Value="{DynamicResource S.Brush.Accent.MouseOver.Background}" />
        <Setter Property="local:Cattach.MouseOverForeground" Value="{DynamicResource S.Brush.TextForeground.Default}" />

        <Setter Property="local:Cattach.SelectBackground" Value="{DynamicResource S.Brush.Accent}" />
        <Setter Property="local:Cattach.SelectForeground" Value="{DynamicResource S.Brush.TextForeground.White}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Grid Background="{TemplateBinding Background}" Margin="0,0.5" Width="{Binding RelativeSource={RelativeSource AncestorType=ComboBox},Path=Weight}">

                        <!--<Border x:Name="ItemBackground" IsHitTestVisible="False" 
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                BorderThickness="{TemplateBinding BorderThickness}"  
                                BorderBrush="{TemplateBinding BorderBrush}"
                                CornerRadius="{TemplateBinding local:Cattach.CornerRadius}"
                                Background="{TemplateBinding Background}" />-->

                        <Border x:Name="MouseOverBorder" CornerRadius="{TemplateBinding local:Cattach.CornerRadius}" Grid.Column="1" Grid.ColumnSpan="2" IsHitTestVisible="False" Opacity="0"  Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(local:Cattach.MouseOverBackground)}"/>

                        <Border x:Name="SelectedBorder" CornerRadius="{TemplateBinding local:Cattach.CornerRadius}" Grid.Column="1" Grid.ColumnSpan="2"  IsHitTestVisible="False"  Opacity="0"  Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(local:Cattach.SelectBackground)}"/>

                        <ContentPresenter x:Name="contentPresenter" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="ItemBackground" Property="Background"  Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(local:Cattach.SelectBackground)}" />
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(local:Cattach.SelectForeground)}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ItemBackground" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(local:Cattach.MouseOverBackground)}" />
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(local:Cattach.MouseOverForeground)}" />
                        </Trigger>-->

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(local:Cattach.MouseOverForeground)}" />

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="MouseOverBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="MouseOverBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsSelected" Value="true">

                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(local:Cattach.SelectForeground)}" />

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--默认样式-->
    <ControlTemplate x:Key="S.Combobox.Tempalte.Default" TargetType="{x:Type ComboBox}">
        <Grid x:Name="PART_Root">
            <Border x:Name="Bg" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                CornerRadius="{TemplateBinding local:Cattach.CornerRadius}"
                                BorderBrush="{TemplateBinding BorderBrush}" Padding="{TemplateBinding Padding}"
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" />

            <Border x:Name="boder_mouseover" BorderBrush="{TemplateBinding BorderBrush}" 
                                Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(local:Cattach.MouseOverBackground)}"
                                Opacity="0.5" 
                                CornerRadius="{TemplateBinding local:Cattach.CornerRadius}"
                                BorderThickness="{TemplateBinding BorderThickness}"/>

            <Border x:Name="boder" BorderBrush="{TemplateBinding BorderBrush}" 
                                Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(local:Cattach.FocusBackground)}"
                                Opacity="0"
                                CornerRadius="{TemplateBinding local:Cattach.CornerRadius}"
                                BorderThickness="{TemplateBinding BorderThickness}"/>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <!--Label区域-->
                <ContentControl x:Name="Label" Foreground="{TemplateBinding Foreground}"
                                            Template="{TemplateBinding local:Cattach.LabelTemplate}" 
                                            IsTabStop="False" IsHitTestVisible="False" 
                                            Background="{TemplateBinding BorderBrush}"
                                            Content="{TemplateBinding local:Cattach.Label}" 
                                            Margin="1,1,0,1"/>

                <!--附加内容区域-->
                <Border  Panel.ZIndex="2" Grid.Column="2" 
                                    VerticalAlignment="Center" HorizontalAlignment="Center" >
                    <ContentControl VerticalAlignment="Center" x:Name="PART_AttachContent"  Foreground="{DynamicResource S.Brush.TextForeground.Assist}"
                                                VerticalContentAlignment="Center" 
                                                Template="{TemplateBinding local:Cattach.AttachContent}" />
                </Border>

                <Border Grid.Column="3" Width="{DynamicResource S.Window.Item.Height}" HorizontalAlignment="Center">
                    <!--下拉按钮-->
                    <ToggleButton x:Name="PART_DropDownToggle" IsTabStop="False" Style="{DynamicResource ComboToggleButton}" local:Cattach.FIconSize="15"
                                         IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                         IsEnabled="{Binding Path=IsReadOnly,RelativeSource={RelativeSource TemplatedParent},
                                         Converter={x:Static local:XConverter.TrueToFalseConverter},Mode=OneWay}"
                                         HorizontalAlignment="Center"
                                         Foreground="{TemplateBinding Foreground}" />
                </Border>

                <ToggleButton Grid.Column="1" Grid.ColumnSpan="55" HorizontalAlignment="Stretch"  Style="{x:Null}"
                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              Background="Transparent">
                    <ToggleButton.Template>
                        <ControlTemplate>
                            <Grid Background="Transparent"/>
                        </ControlTemplate>
                    </ToggleButton.Template>
                </ToggleButton>

                <!--水印-->
                <Border Grid.Column="1">
                    <TextBlock x:Name="Message" Visibility="Collapsed" 
                                           Text="{TemplateBinding local:Cattach.Watermark}" 
                                           Foreground="{TemplateBinding Foreground}" IsHitTestVisible="False" 
                                           Opacity="{DynamicResource S.Opacity.Watermark}" HorizontalAlignment="Left" 
                                           TextAlignment="Center" 
                                           VerticalAlignment="Center" Margin="{TemplateBinding Padding}" />
                </Border>

                <!--主内容区域-->
                <Border Grid.Column="1">
                    <Grid  x:Name="ContentSite" Margin="{TemplateBinding Padding}">
                        <ContentPresenter x:Name="PART_SelectedItem"
                                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                                  Content="{TemplateBinding SelectionBoxItem}" 
                                                  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                                  HorizontalAlignment="Stretch"
                                                  IsHitTestVisible="False" 
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        <!--文本编辑-->
                        <TextBox  x:Name="PART_EditableTextBox"
                                         Style="{DynamicResource EditableTextBoxStyle}" 
                                         Visibility="Collapsed"
                                         HorizontalAlignment="Stretch" 
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                         IsHitTestVisible="True" Margin="{TemplateBinding Padding}"
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                         VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                         IsReadOnly="{TemplateBinding IsReadOnly}" 
                                         FontFamily="{TemplateBinding FontFamily}" 
                                         Foreground="{TemplateBinding Foreground}" 
                                         Text="{TemplateBinding Text}" 
                                         FontSize="{TemplateBinding FontSize}" />
                    </Grid>
                </Border>
            </Grid>

            <!--弹出下拉控件-->
            <Popup x:Name="PART_Popup" PlacementTarget="{Binding ElementName=Bg}"
                               AllowsTransparency="True"
                               Focusable="False" VerticalOffset="0"
                               IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                               Placement="Bottom">
                <Grid Width="{Binding ActualWidth,ElementName=Bg}"  MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}">

                    <Grid x:Name="grid_auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top" Margin="0,5,0,0">
                        <!--<Path Data="{TemplateBinding local:Cattach.Path}" Stroke="{DynamicResource S.Brush.Accent}" 
                          Fill="{DynamicResource S.Brush.TextBackground.Default}" StrokeThickness="1" Height="{Binding ElementName=grid_auto,Path=ActualHeight}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stretch="Fill"/>-->

                        <Border Background="{DynamicResource S.Brush.TextBackground.Default}" BorderBrush="{DynamicResource S.Brush.Accent}" BorderThickness="1" CornerRadius="{DynamicResource S.Window.Item.CornerRadius}">
                        </Border>
                        <Polygon  HorizontalAlignment="Right" Fill="{DynamicResource S.Brush.Accent}" Stroke="{DynamicResource S.Brush.TextBorderBrush.Default}" Points="0,5 5,0 10,5 0,5" Margin="0,-5,8,0" FillRule="Nonzero"/>

                        <ScrollViewer x:Name="DropDownScrollViewer" BorderThickness="0" VerticalAlignment="Top" Margin="2">
                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" Height="Auto"/>
                        </ScrollViewer>

                    </Grid>

                </Grid>
            </Popup>
        </Grid>
        <!--触发器-->
        <ControlTemplate.Triggers>

            <!--编辑模式-->
            <Trigger Property="IsEditable" Value="True">
                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_SelectedItem" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_DropDownToggle" Property="Grid.Column" Value="3" />
                <Setter TargetName="PART_DropDownToggle" Property="Grid.ColumnSpan" Value="1" />
                <Setter TargetName="PART_DropDownToggle" Property="Background" Value="Transparent" />
                <Setter Property="IsTabStop" Value="false" />
                <Setter TargetName="PART_DropDownToggle" Property="Focusable" Value="False" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Root" Property="Opacity" Value="{DynamicResource S.Opacity.Disable}"></Setter>
            </Trigger>

            <!--1.显示水印-->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                <Setter TargetName="Message" Property="Visibility" Value="Visible" />
            </DataTrigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Path=(local:Cattach.MouseOverBorderBrush),RelativeSource={RelativeSource Self}}"/>
                <Setter  Property="Foreground" TargetName="Label" Value="{Binding Path=(local:Cattach.MouseOverBorderBrush),RelativeSource={RelativeSource Self}}"/>
                <Setter  Property="Foreground" TargetName="PART_AttachContent" Value="{Binding Path=(local:Cattach.MouseOverBorderBrush),RelativeSource={RelativeSource Self}}"/>
                <Setter  Property="Foreground" TargetName="PART_DropDownToggle" Value="{Binding Path=(local:Cattach.MouseOverBorderBrush),RelativeSource={RelativeSource Self}}"/>
                <Setter  Property="Foreground" TargetName="Message" Value="{Binding Path=(local:Cattach.MouseOverBorderBrush),RelativeSource={RelativeSource Self}}"/>

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder_mouseover" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder_mouseover" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>

            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter  Property="Foreground" TargetName="Label" Value="{DynamicResource S.Brush.Accent}"/>
                <Setter  Property="BorderBrush"  Value="{Binding Path=(local:Cattach.FocusBorderBrush),RelativeSource={RelativeSource Self}}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter  Property="BorderBrush" Value="{Binding Path=(local:Cattach.FocusBorderBrush),RelativeSource={RelativeSource Self}}"/>
                <Setter  Property="Foreground" TargetName="Label" Value="{DynamicResource S.Brush.Accent}"/>
                <Setter  Property="Foreground" TargetName="PART_AttachContent" Value="{DynamicResource S.Brush.Accent}"/>
                <Setter  Property="Foreground" TargetName="Message" Value="{DynamicResource S.Brush.Accent}"/>

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--抬头在外部样式-->
    <ControlTemplate x:Key="S.Combobox.Tempalte.Single" TargetType="{x:Type ComboBox}">
        <Grid x:Name="PART_Root">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <Border x:Name="Bg" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                CornerRadius="{TemplateBinding local:Cattach.CornerRadius}" Padding="{TemplateBinding Padding}"
                                BorderBrush="{TemplateBinding BorderBrush}" Grid.Column="1" Grid.ColumnSpan="4"
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" />

                <Border x:Name="boder_mouseover" BorderBrush="{TemplateBinding BorderBrush}" 
                                Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(local:Cattach.MouseOverBackground)}"
                                Opacity="0.5"  Grid.Column="1" Grid.ColumnSpan="4"
                                CornerRadius="{TemplateBinding local:Cattach.CornerRadius}"
                                BorderThickness="{TemplateBinding BorderThickness}"/>

                <Border x:Name="boder" BorderBrush="{TemplateBinding BorderBrush}" 
                                Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(local:Cattach.FocusBackground)}"
                                Opacity="0"  Grid.Column="1" Grid.ColumnSpan="4"
                                CornerRadius="{TemplateBinding local:Cattach.CornerRadius}"
                                BorderThickness="{TemplateBinding BorderThickness}"/>

                <!--Label区域-->
                <ContentControl x:Name="Label" 
                                            Template="{TemplateBinding local:Cattach.LabelTemplate}" 
                                            IsTabStop="False" IsHitTestVisible="False" 
                                            Background="{TemplateBinding BorderBrush}"
                                            Content="{TemplateBinding local:Cattach.Label}" 
                                            Margin="1,1,0,1"/>

                <TextBlock x:Name="ficon" Style="{DynamicResource S.TextBlock.FIcon}" HorizontalAlignment="Center"  Foreground="{TemplateBinding Foreground}"
                                       VerticalAlignment="Center" Grid.Column="1" 
                                       FontSize="{TemplateBinding local:Cattach.FIconSize}"
                                       Margin="{TemplateBinding local:Cattach.FIconMargin}" 
                                       Text="{TemplateBinding local:Cattach.FIcon}"/>

                <!--附加内容区域-->
                <Border  Panel.ZIndex="2" Grid.Column="3" VerticalAlignment="Center" HorizontalAlignment="Center" >
                    <ContentControl VerticalAlignment="Center" x:Name="PART_AttachContent"
                                    Foreground="{TemplateBinding Foreground}" 
                                    VerticalContentAlignment="Center" 
                                    Template="{TemplateBinding local:Cattach.AttachContent}" />
                </Border>



                <Border Grid.Column="4" Width="{DynamicResource S.Window.Item.Height}" HorizontalAlignment="Center">
                    <!--下拉按钮-->
                    <ToggleButton x:Name="PART_DropDownToggle" IsTabStop="False" Style="{DynamicResource ComboToggleButton}" local:Cattach.FIconSize="15"
                                         IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                         IsEnabled="{Binding Path=IsReadOnly,RelativeSource={RelativeSource TemplatedParent},
                                         Converter={x:Static local:XConverter.TrueToFalseConverter},Mode=OneWay}"
                                         HorizontalAlignment="Center"
                                         Foreground="{TemplateBinding Foreground}" />
                </Border>

                <ToggleButton Grid.Column="1" Grid.ColumnSpan="55" HorizontalAlignment="Stretch"  Style="{x:Null}"
                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              Background="Transparent">
                    <ToggleButton.Template>
                        <ControlTemplate>
                            <Grid Background="Transparent"/>
                        </ControlTemplate>
                    </ToggleButton.Template>
                </ToggleButton>

                <!--水印-->
                <Border Grid.Column="2" Margin="{TemplateBinding Padding}">
                    <TextBlock x:Name="Message" Visibility="Collapsed" 
                                       Text="{TemplateBinding local:Cattach.Watermark}" 
                                       Foreground="{TemplateBinding Foreground}" IsHitTestVisible="False" 
                                       Opacity="{DynamicResource S.Opacity.Watermark}" HorizontalAlignment="Left" 
                                       TextAlignment="Center" 
                                       VerticalAlignment="Center" Margin="{TemplateBinding Padding}" />
                </Border>

                <!--主内容区域-->
                <Grid Grid.Column="2" x:Name="ContentSite" Margin="{TemplateBinding Padding}">
                    <ContentPresenter x:Name="PART_SelectedItem" 
                                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                                  Content="{TemplateBinding SelectionBoxItem}" 
                                                  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                                  HorizontalAlignment="Stretch"
                                                  IsHitTestVisible="False" 
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    <!--文本编辑-->
                    <TextBox  x:Name="PART_EditableTextBox" 
                                          Style="{DynamicResource EditableTextBoxStyle}" 
                                          Visibility="Collapsed" 
                                          HorizontalAlignment="Stretch" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          IsHitTestVisible="True"
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          IsReadOnly="{TemplateBinding IsReadOnly}" 
                                          FontFamily="{TemplateBinding FontFamily}" 
                                          Foreground="{TemplateBinding Foreground}"
                                          Background="Transparent"
                                          Text="{TemplateBinding Text}" 
                                          FontSize="{TemplateBinding FontSize}" />
                </Grid>
            </Grid>
            <!--弹出下拉控件-->
            <Popup x:Name="PART_Popup"  PlacementTarget="{Binding ElementName=Bg}"
                               AllowsTransparency="True" 
                               Focusable="False" VerticalOffset="2"
                               IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                               Placement="Bottom">

                <Grid Width="{Binding  ActualWidth,ElementName=Bg}" MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}">

                    <Grid x:Name="grid_auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top"  Margin="0,5,0,0">
                        <Border Background="{DynamicResource S.Brush.TextBackground.Default}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="{DynamicResource S.Window.Item.CornerRadius}"/>

                        <Polygon  HorizontalAlignment="Right" Fill="{TemplateBinding BorderBrush}" Stroke="{DynamicResource S.Brush.TextBorderBrush.Default}" Points="0,5 5,0 10,5 0,5" Margin="0,-5,8,0" FillRule="Nonzero"/>

                        <ScrollViewer x:Name="DropDownScrollViewer" BorderThickness="0" Margin="2">
                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"/>
                        </ScrollViewer>
                    </Grid>

                </Grid>
            </Popup>
        </Grid>
        <!--触发器-->
        <ControlTemplate.Triggers>

            <!--编辑模式-->
            <Trigger Property="IsEditable" Value="True">
                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_SelectedItem" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_DropDownToggle" Property="Grid.Column" Value="3" />
                <Setter TargetName="PART_DropDownToggle" Property="Grid.ColumnSpan" Value="1" />
                <Setter TargetName="PART_DropDownToggle" Property="Background" Value="Transparent" />
                <Setter Property="IsTabStop" Value="false" />
                <Setter TargetName="PART_DropDownToggle" Property="Focusable" Value="False" />
            </Trigger>

            <!--1.显示水印-->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                <Setter TargetName="Message" Property="Visibility" Value="Visible" />
            </DataTrigger>

            <Trigger Property="IsMouseOver" Value="True">
                <!--<Setter Property="BorderBrush" Value="{Binding Path=(local:Cattach.MouseOverBorderBrush),RelativeSource={RelativeSource Self}}"/>-->
                <Setter  Property="Foreground" TargetName="Label" Value="{Binding Path=(local:Cattach.MouseOverBorderBrush),RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                <Setter  Property="Foreground" TargetName="PART_AttachContent" Value="{Binding Path=(local:Cattach.MouseOverBorderBrush),RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                <Setter  Property="Foreground" TargetName="PART_DropDownToggle" Value="{Binding Path=(local:Cattach.MouseOverBorderBrush),RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                <Setter  Property="Foreground" TargetName="Message" Value="{Binding Path=(local:Cattach.MouseOverBorderBrush),RelativeSource={RelativeSource Mode=TemplatedParent}}"/>

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder_mouseover" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder_mouseover" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter  Property="Foreground" TargetName="Label" Value="{Binding Path=(local:Cattach.FocusBorderBrush),RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                <!--<Setter  Property="BorderBrush"  Value="{Binding Path=(local:Cattach.FocusBorderBrush),RelativeSource={RelativeSource Self}}"/>-->
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <!--<Setter  Property="BorderBrush" Value="{Binding Path=(local:Cattach.FocusBorderBrush),RelativeSource={RelativeSource Self}}"/>-->
                <Setter  Property="Foreground" TargetName="Label" Value="{Binding Path=(local:Cattach.FocusBorderBrush),RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                <Setter  Property="Foreground" TargetName="PART_AttachContent" Value="{Binding Path=(local:Cattach.FocusBorderBrush),RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                <Setter  Property="Foreground" TargetName="Message" Value="{Binding Path=(local:Cattach.FocusBorderBrush),RelativeSource={RelativeSource Mode=TemplatedParent}}"/>

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource S.Opacity.Disable}"></Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type ComboBox}" x:Key="S.ComboBox.Default">
        <Setter Property="Height" Value="{DynamicResource S.Window.Item.Height}" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="local:Cattach.FIconMargin" Value="0,0,0,0" />
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.Default}" />
        <Setter Property="Background" Value="{DynamicResource S.Brush.TextBackground.Default}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource S.Brush.TextBorderBrush.Default}" />
        <!--<Setter Property="local:Cattach.FocusBackground" Value="{DynamicResource S.Brush.Dark.4}" />-->
        <Setter Property="local:Cattach.FocusBorderBrush" Value="{DynamicResource S.Brush.Accent}" />

        <Setter Property="local:Cattach.MouseOverBackground" Value="{DynamicResource S.Brush.TextForeground.MouseOver}"/>
        <Setter Property="local:Cattach.FocusBackground" Value="{DynamicResource S.Brush.TextForeground.Selected}" />

        <Setter Property="Padding" Value="{DynamicResource S.Thickness.Margin.2.0}" />
        <Setter Property="local:Cattach.MouseOverBorderBrush" Value="{DynamicResource S.Brush.Accent.MouseOver}" />
        <Setter Property="local:Cattach.CornerRadius" Value="{DynamicResource S.Window.Item.CornerRadius}" />
        <Setter Property="FontFamily" Value="{DynamicResource  S.FontFamily.Default}" />
        <Setter Property="FontSize" Value="{DynamicResource S.FontSize.Default}" />
        <Setter Property="ItemContainerStyle" Value="{DynamicResource S.ComboBoxItem.Default}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="MaxDropDownHeight" Value="400" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
        <!--<Setter Property="local:Cattach.Path" Value="{StaticResource S.Geometry.Rectangle.Rounded.TopRight}"/>-->
        <Setter Property="Template" Value="{StaticResource S.Combobox.Tempalte.Default}"/>
        <!--<Setter Property="RenderTransform" Value="{StaticResource S.TransformGroup.Default}"/>-->

        <Setter Property="local:Cattach.FIcon" Value="&#xe6ed;"/>
        <Setter Property="local:Cattach.FIconSize" Value="{DynamicResource S.FIcon.Size.Default}"/>
        <Setter Property="local:Cattach.FIconMargin" Value="5,0,0,0"/>

        <Setter Property="local:Cattach.TitleForeground" Value="{DynamicResource S.Brush.TextForeground.Default}"/>
        <Setter Property="local:Cattach.TitleMargin" Value="{DynamicResource S.Thickness.Margin.10.0}"/>
        <Setter Property="local:Cattach.TitleWidth" Value="{DynamicResource S.Window.Title.Width}"/>
    </Style>

    <Style TargetType="{x:Type ComboBox}" x:Key="S.ComboBox.Single" BasedOn="{StaticResource S.ComboBox.Default}">
        <Setter Property="Template" Value="{StaticResource S.Combobox.Tempalte.Single}"/>
        <Setter Property="local:Cattach.FocusBorderBrush" Value="{DynamicResource S.Brush.TextForeground.Title}" />
        <Setter Property="local:Cattach.MouseOverBorderBrush" Value="{DynamicResource S.Brush.TextForeground.Default}"/>
        <Setter Property="local:Cattach.TitleForeground" Value="{DynamicResource S.Brush.TextForeground.Default}"/>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ComboBoxItem" BasedOn="{StaticResource S.ComboBoxItem.Default}">
                    <Setter Property="local:Cattach.MouseOverBackground" Value="{DynamicResource S.Brush.TextForeground.MouseOver}"/>
                    <Setter Property="local:Cattach.MouseOverForeground" Value="{DynamicResource S.Brush.TextForeground.Default}"/>
                    <Setter Property="local:Cattach.SelectBackground" Value="{DynamicResource S.Brush.TextForeground.Selected}"/>
                    <Setter Property="local:Cattach.SelectForeground" Value="{DynamicResource S.Brush.TextForeground.Default}"/>
                    <Setter Property="local:Cattach.CornerRadius" Value="{DynamicResource S.Window.Item.CornerRadius}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource S.Brush.TextBorderBrush.Default}"/>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ComboBox包含清除Text按钮的样式 S.ComboBox.Clear -->
    <Style TargetType="{x:Type ComboBox}" x:Key="S.ComboBox.Clear" BasedOn="{StaticResource S.ComboBox.Default}">
        <Setter Property="local:Cattach.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <!--<local:FButton FIcon="&#xe6f4;" Style="{DynamicResource S.FButton.Style.Transparent}" 
                                   IsTabStop="False" FIconMargin="0" AllowsAnimation="True" 
                                   local:Cattach.IsClearTextButtonBehaviorEnabled="True" 
                                   Command="local:Cattach.ClearTextCommand" 
                                   CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ComboBox}}}"
                                   IsEnabled="{Binding Path=IsReadOnly,RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ComboBox}},
                                   Converter={x:Static local:XConverter.TrueToFalseConverter},Mode=OneWay}"
                                   Margin="0,0,-2,0" FIconSize="14" Foreground="{TemplateBinding Foreground}"  Cursor="Arrow"/>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ComboBox包含附加属性Label的样式 S.ComboBox.Label -->
    <Style TargetType="{x:Type ComboBox}" x:Key="S.ComboBox.Label" BasedOn="{StaticResource S.ComboBox.Default}">
        <Setter Property="local:Cattach.LabelTemplate" >
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border  Background="{DynamicResource S.Brush.Accent}" CornerRadius="{DynamicResource S.Window.Item.CornerRadius.Left}">
                        <TextBlock Margin="3" VerticalAlignment="Center" HorizontalAlignment="Right"  Foreground="{DynamicResource S.Brush.TextForeground.White}" Text="{TemplateBinding Content}"></TextBlock>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ComboBox包含附加属性Label，以及ClearText按钮的样式 S.ComboBox.LabelClear -->
    <Style TargetType="{x:Type ComboBox}" x:Key="S.ComboBox.LabelClear" BasedOn="{StaticResource S.ComboBox.Label}">
        <Setter Property="local:Cattach.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <!--<local:FButton FIcon="&#xe6f4;" Style="{DynamicResource S.FButton.Style.Transparent}" IsTabStop="False" FIconMargin="0"
                               local:Cattach.IsClearTextButtonBehaviorEnabled="True" 
                                   Command="local:Cattach.ClearTextCommand" 
                               CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ComboBox}}}"
                                   IsEnabled="{Binding Path=IsReadOnly,RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ComboBox}},
                        Converter={x:Static local:XConverter.TrueToFalseConverter},Mode=OneWay}"  HorizontalAlignment="Center"
                               Margin="0,0,-2,0" FIconSize="14" Foreground="{TemplateBinding Foreground}"  Cursor="Arrow"/>-->

                    <Button Style="{DynamicResource S.Button.Clear}"
                                local:Cattach.IsClearTextButtonBehaviorEnabled="True" 
                                Command="local:Cattach.ClearTextCommand" 
                               CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ComboBox}}}"
                             IsEnabled="{Binding Path=IsReadOnly,RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ComboBox}},
                        Converter={x:Static local:XConverter.TrueToFalseConverter},Mode=OneWay}"  HorizontalAlignment="Center"
                               Margin="0,0,-10,0" Foreground="{TemplateBinding Foreground}"  Cursor="Arrow"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--ComboBox包含附加属性Label的样式 S.ComboBox.Label -->
    <Style TargetType="{x:Type ComboBox}" x:Key="S.ComboBox.Single.Label" BasedOn="{StaticResource S.ComboBox.Single}">
        <Setter Property="local:Cattach.LabelTemplate" >
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border  Width="{Binding RelativeSource={RelativeSource AncestorType=ComboBox},Path=(local:Cattach.TitleWidth)}"  
                             Margin="{Binding RelativeSource={RelativeSource AncestorType=ComboBox},Path=(local:Cattach.TitleMargin)}">
                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Left" 
                                   Foreground="{Binding RelativeSource={RelativeSource AncestorType=ComboBox},Path=(local:Cattach.TitleForeground)}" 
                                   Text="{TemplateBinding Content}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ComboBox包含附加属性Label，以及ClearText按钮的样式 S.ComboBox.LabelClear -->
    <Style TargetType="{x:Type ComboBox}" x:Key="S.ComboBox.Single.LabelClear" BasedOn="{StaticResource S.ComboBox.Single.Label}">
        <Setter Property="local:Cattach.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <!--<local:FButton FIcon="&#xe6f4;" Style="{DynamicResource S.FButton.Style.Transparent}" IsTabStop="False" FIconMargin="0"
                               local:Cattach.IsClearTextButtonBehaviorEnabled="True" 
                               Command="local:Cattach.ClearTextCommand" Visibility="Collapsed"
                               CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ComboBox}}}"
                               IsEnabled="{Binding Path=IsReadOnly,RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ComboBox}},
                               Converter={x:Static local:XConverter.TrueToFalseConverter},Mode=OneWay}" HorizontalAlignment="Center"
                               Margin="0,0,0,0" FIconSize="14" Foreground="{TemplateBinding Foreground}" Cursor="Arrow"/>-->

                        <Button Style="{DynamicResource S.Button.Clear}"
                                local:Cattach.IsClearTextButtonBehaviorEnabled="True" 
                                Command="local:Cattach.ClearTextCommand" 
                               CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ComboBox}}}"
                              IsEnabled="{Binding Path=IsReadOnly,RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ComboBox}},
                        Converter={x:Static local:XConverter.TrueToFalseConverter},Mode=OneWay}"  HorizontalAlignment="Center"
                               Margin="0,0,-10,0" Foreground="{Binding RelativeSource={RelativeSource AncestorType=ComboBox},Path=Foreground}"  Cursor="Arrow"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ComboBox}" x:Key="S.ComboBox.Circle" BasedOn="{StaticResource S.ComboBox.Default}">
        <Setter Property="IsEditable" Value="False"/>
        <Setter Property="local:Cattach.CornerRadius" Value="{DynamicResource S.Window.Item.CornerRadius}"/>
    </Style>

    <Style TargetType="{x:Type ComboBox}" x:Key="S.ComboBox.Circle.Label" BasedOn="{StaticResource S.ComboBox.Label}">
        <Setter Property="IsEditable" Value="False"/>
        <Setter Property="local:Cattach.CornerRadius" Value="{DynamicResource S.Window.Item.CornerRadius}"/>
        <Setter Property="local:Cattach.LabelTemplate" >
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border MinWidth="90" Background="Transparent">
                        <TextBlock  Margin="3" VerticalAlignment="Center" HorizontalAlignment="Right" Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Foreground}" Text="{TemplateBinding Content}"></TextBlock>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>