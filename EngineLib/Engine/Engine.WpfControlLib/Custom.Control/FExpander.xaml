<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:local="clr-namespace:Engine.WpfControl"
    xmlns:h="QQ:178876839"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Style x:Key="S.FExpander.Default" TargetType="{x:Type local:FExpander}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
         <!--内容背景色-->
        <Setter Property="Background" Value="{DynamicResource S.Brush.TextBackground.Default}"/>
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.Default}"/>
        <Setter Property="MinWidth" Value="180"/>
        <Setter Property="CanHide" Value="True"/>
        <Setter Property="IsExpanded" Value="False"/>
        <Setter Property="Hint" Value="{x:Null}"/>
        <!--详细信息颜色-->
        <Setter Property="HintBackground" Value="Transparent"/>
        <Setter Property="HintForeground" Value="{DynamicResource S.Brush.TextForeground.White}"/>
        
        <Setter Property="TitleBackground" Value="{DynamicResource S.Brush.Accent}"/>
        <Setter Property="TitleForeground" Value="{DynamicResource S.Brush.TextForeground.White}"/>

        <Setter Property="FontSize" Value="{DynamicResource S.FontSize.Header}"/>
        <Setter Property="HeaderHeight" Value="{Binding Source={StaticResource S.Window.Row.Height},Converter={x:Static h:XConverter.MathMultiplicationConverter},ConverterParameter=1.2}"/>

        <Style.Triggers>
            <Trigger Property="CanHide" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type local:FExpander}">
                            <Grid Background="{TemplateBinding Background}">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup>
                                        <VisualState x:Name="Normal">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="height" Storyboard.TargetProperty="(Height)" To="0" Duration="0:0:0.15"/>
                                                <DoubleAnimation Storyboard.TargetName="angle" Storyboard.TargetProperty="(Angle)" To="0" Duration="0:0:0.15"/>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="StartNormal">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="height" Storyboard.TargetProperty="(Height)" To="0" Duration="0:0:0"/>
                                                <DoubleAnimation Storyboard.TargetName="angle" Storyboard.TargetProperty="(Angle)" To="0" Duration="0:0:0"/>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Expand">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="height" Storyboard.TargetProperty="(Height)" To="{Binding ElementName=content,Path=ActualHeight}" Duration="0:0:0.15"/>
                                                <DoubleAnimation Storyboard.TargetName="angle" Storyboard.TargetProperty="(Angle)" To="90" Duration="0:0:0.15"/>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="StartExpand">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="height" Storyboard.TargetProperty="(Height)" To="{Binding ElementName=content,Path=ActualHeight}" Duration="0:0:0"/>
                                                <DoubleAnimation Storyboard.TargetName="angle" Storyboard.TargetProperty="(Angle)" To="90" Duration="0:0:0"/>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
<!--抬头部分-->
                                <Border x:Name="border" Background="{TemplateBinding TitleBackground}" Height="{TemplateBinding HeaderHeight}" Margin="0,0,0,0">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition x:Name="IconFontWidth" Width="Auto"/>
                                            <ColumnDefinition/>
                                            <ColumnDefinition x:Name="hintWidth" Width="Auto"/>
                                            <ColumnDefinition x:Name="algleWidth" Width="Auto"/>
                                        </Grid.ColumnDefinitions>

                                        <local:FButton Grid.ColumnSpan="5" Foreground="Transparent" Background="Transparent" Width="{TemplateBinding Width}" FIcon="" 
                                                       MouseOverBackground="Transparent" BorderThickness="0"  Command="local:FExpander.ButtonClickCommand"/>

                                        <!--图像-->
                                        <TextBlock Grid.Column="0" Style="{DynamicResource S.TextBlock.FIcon}" Foreground="{TemplateBinding HintForeground}"
                                                   FontSize="{Binding RelativeSource={RelativeSource AncestorType=local:FExpander},Path=(h:Cattach.FIconSize)}"
                                                   VerticalAlignment="Center" Width="Auto" HorizontalAlignment="Center" Margin="{Binding RelativeSource={RelativeSource AncestorType=local:FExpander},Path=(h:Cattach.FIconMargin)}"
                                                   Text="{TemplateBinding IconFont}" Opacity="1"/> 

                                       <!--抬头文本-->
                                        <TextBlock Grid.Column="1" Text="{TemplateBinding Header}"  Foreground="{TemplateBinding HintForeground}"
                                                   IsHitTestVisible="False"  Margin="10,8,5,8"  FontSize="{DynamicResource S.FontSize.Default}"
                                                   VerticalAlignment="Center" HorizontalAlignment="Left"/>

                                        <!--详细信息背景-->
                                        <Border  Grid.Column="2" Margin="0,0,5,0" VerticalAlignment="Center"  
                                                 IsHitTestVisible="False" Background="{TemplateBinding HintBackground}">
                                            <TextBlock VerticalAlignment="Center" Margin="8,1" Text="{TemplateBinding Hint}" 
                                                       Foreground="{TemplateBinding HintForeground}"/> <!--FontSize="11"-->
                                        </Border>
                                        
                                        <!--下拉图标-->
                                        <Grid Grid.Column="3" Margin="10,0" VerticalAlignment="Center"  IsHitTestVisible="True" >
                                            <Polyline Points="0,0 5,5 0,10" Stroke="{TemplateBinding HintForeground}" RenderTransformOrigin="0.5,0.5" Opacity="1">
                                                <Polyline.RenderTransform>
                                                    <TransformGroup>
                                                        <RotateTransform x:Name="angle" Angle="0"/>
                                                    </TransformGroup>
                                                </Polyline.RenderTransform>
                                            </Polyline>
                                        </Grid>
                                    </Grid>
                                </Border>

                                <Grid x:Name="height" Grid.Row="1" Background="{TemplateBinding Background}" Height="{Binding ActualHeight,ElementName=content}" ClipToBounds="True">
                                    <Canvas x:Name="canvas" Height="{Binding ActualHeight,ElementName=content}" MinWidth="{Binding ActualWidth,ElementName=content}">
                                        <Grid x:Name="content" ClipToBounds="True" MinWidth="{Binding ActualWidth,ElementName=canvas}">
                                            <ContentPresenter/>
                                        </Grid>
                                    </Canvas>
                                </Grid>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Hint" Value="{x:Null}">
                                    <Setter TargetName="hintWidth" Property="Width" Value="0"/>
                                </Trigger>
                                
                                <Trigger Property="IconFont" Value="{x:Null}">
                                    <Setter TargetName="IconFontWidth" Property="Width" Value="0"/>
                                </Trigger>
                                <Trigger Property="Content" Value="{x:Null}">
                                    <Setter TargetName="algleWidth" Property="MaxWidth" Value="0"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <!--<Setter Property="Background" Value="{DynamicResource S.Brush.Share.UnEnbled.Background}" TargetName="border"/>-->
                                    <Setter Property="Opacity" Value="{DynamicResource S.Opacity.Disable}"/>
                                </Trigger>
                                <!--<Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" Value="{DynamicResource S.Brush.Accent.MouseOver}" TargetName="border"/>
                                </Trigger>-->
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="CanHide" Value="False">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type local:FExpander}">
                            <Grid Background="{TemplateBinding Background}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Border BorderBrush="{DynamicResource S.Brush.Accent}" BorderThickness="0,0,0,1">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition x:Name="IconFontWidth" Width="Auto"/>
                                            <ColumnDefinition/>
                                            <ColumnDefinition x:Name="hintWidth" Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        
                                        <!--图像-->
                                        <TextBlock Grid.Column="0" Style="{DynamicResource S.TextBlock.FIcon}" 
                                                   FontSize="{Binding RelativeSource={RelativeSource AncestorType=local:FExpander},Path=(h:Cattach.FIconSize)}"
                                                   Margin="0,0,0,0" HorizontalAlignment="Center" 
                                                   VerticalAlignment="Center" 
                                                   Text="{TemplateBinding IconFont}"/>

                                        <TextBlock Grid.Column="1" Text="{TemplateBinding Header}" FontSize="{DynamicResource S.FontSize.Default}"
                                                   Margin="10,8,5,8" Foreground="{TemplateBinding Foreground}"
                                                   VerticalAlignment="Center" 
                                                   HorizontalAlignment="Left"/>

                                        <Border    Grid.Column="2"  Margin="0,0,5,0" VerticalAlignment="Center" Background="{TemplateBinding HintBackground}">
                                            <TextBlock VerticalAlignment="Center" Margin="8,1" Text="{TemplateBinding Hint}" Foreground="{TemplateBinding HintForeground}"/>
                                        </Border>
                                    </Grid>
                                </Border>

                                <Border Grid.Row="1" Background="{TemplateBinding Background}" BorderBrush="#e6e6e6" BorderThickness="0,0,0,1">
                                    <ContentPresenter/>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Hint" Value="{x:Null}">
                                    <Setter TargetName="hintWidth" Property="Width" Value="0"/>
                                </Trigger>
                                <Trigger Property="IconFont" Value="{x:Null}">
                                    <Setter TargetName="IconFontWidth" Property="Width" Value="0"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="S.FExpander.Accent" TargetType="{x:Type local:FExpander}" BasedOn="{StaticResource S.FExpander.Default}">
        <!--内容背景色-->
        <Setter Property="Background" Value="{DynamicResource S.Brush.Accent}"/>
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.White}"/>
 
        <Setter Property="HintBackground" Value="Transparent"/>
        <Setter Property="HintForeground" Value="{DynamicResource S.Brush.TextForeground.White}"/>

        <Setter Property="TitleBackground" Value="{DynamicResource S.Brush.White.Opactiy.4}"/>
        <Setter Property="TitleForeground" Value="{DynamicResource S.Brush.TextForeground.White}"/>
    </Style>

    <Style TargetType="{x:Type local:FExpander}" BasedOn="{StaticResource S.FExpander.Default}"/>
</ResourceDictionary>
