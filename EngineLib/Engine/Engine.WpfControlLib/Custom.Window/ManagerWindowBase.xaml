<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Engine.WpfControl"
                    xmlns:h="QQ:178876839" 
                    xmlns:s="clr-namespace:Engine.WpfBase"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:cl="clr-namespace:System.Collections;assembly=mscorlib">

    <!--<ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Control/FButton.xaml"/>
        <ResourceDictionary Source="MainWindowBase.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="S.Window.Manager.Default" TargetType="{x:Type local:ManagerWindowBase}"  BasedOn="{StaticResource S.Window.Main.Default}">
        <Setter Property="Background" Value="{DynamicResource S.Brush.Dark.2}"/>
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.Default}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="CaptionHeight" Value="70"/>
        <Setter Property="CaptionForeground" Value="{DynamicResource S.Brush.TextForeground.White}" />
        <Setter Property="CaptionBackground" Value="{DynamicResource S.Brush.Accent}" />
    </Style>

    <Style x:Key="S.Window.Manager.LinkGroups.Default" TargetType="{x:Type local:LinkGroupsManagerWindowBase}" BasedOn="{StaticResource S.Window.Manager.Default}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:LinkGroupsManagerWindowBase}">
                    <Viewbox>
                        <Grid Name="g_all" Width="1920" Height="1055"  Margin="2,0,2,2">

                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Loaded">
                                    <i:InvokeCommandAction Command="{Binding LoadedCommand}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                            
                            --><!--背景--><!--
                            <Border x:Name="Bg"
                  CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  Effect="{DynamicResource S.DropShadowEffect.Window}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  />

                            <Border x:Name="BgInner" CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                    Background="{TemplateBinding Background}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                            <Grid>
                                --><!--窗体内容区域--><!--
                                <AdornerDecorator Grid.Row="1" Margin="1,1,1,1" WindowChrome.IsHitTestVisibleInChrome="True">
                                    <Grid>
                                        --><!--托盘图标--><!--
                                        <local:NotifyIcon x:Name="PART_NotifyIcon"
                                      Icon="{Binding Path=NotifyIconSource,RelativeSource={RelativeSource TemplatedParent}}"
                                      Command="{Binding Path=MinimizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"
                                      Text="{TemplateBinding Title}"
                                      IconVisibility="Visible">

                                            <FrameworkElement.ContextMenu>
                                                <ContextMenu>
                                                    <MenuItem Header="显示面板" />
                                                    <MenuItem Header="退出" />
                                                </ContextMenu>
                                            </FrameworkElement.ContextMenu>
                                        </local:NotifyIcon>

                                        <local:DrawerHost HorizontalContentAlignment="Stretch">
                                            <Grid>
                                                --><!--整体消息弹出--><!--
                                                <local:DialogHost Identifier="windowDialog" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="-3,0,-3,-3">
                                                    <Grid>

                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="Auto"/>
                                                            <ColumnDefinition/>
                                                        </Grid.ColumnDefinitions>


                                                        <Border>
                                                            <Border.Background>
                                                                <ImageBrush ImageSource="/Engine.WpfControl;component/Resources/Cover.png"/>
                                                            </Border.Background>
                                                        </Border>

                                                        --><!--左侧菜单--><!--
                                                        <Border Background="{DynamicResource S.Brush.Accent}" CornerRadius="{DynamicResource S.Window.Item.CornerRadius.Left}">
                                                            <StackPanel x:Name="sp_left"  Width="278">
                                                                <i:Interaction.Behaviors>
                                                                    --><!--<i:FluidMoveBehavior AppliesTo="Self" Duration="00:00:01"  FloatAbove="True"/>-->
                                                                    <!--<i:LoadAnimationBehavior IsUseAll="True" LoadAnimationType="Opactiy" StartValue="0" EndValue="1" Split="0.05" End="0.2"/>-->
                                                                    <!--<LoadAnimationBehavior IsUseAll="True" LoadAnimationType="VerticalAlignment" StartValue="1000" EndValue="0" End="1" Split="0.2"/>--><!--
                                                                </i:Interaction.Behaviors>

                                                                <Image Width="150" Height="{TemplateBinding CaptionHeight}" Source="{TemplateBinding Logo}" HorizontalAlignment="Center" VerticalAlignment="Center" />

                                                                --><!--<local:LinkGroupExpander Style="{DynamicResource S.LinkGroupExpander.Accent}"
                                                        ItemsSource="{TemplateBinding LinkActionGroups}" SelectedLink="{Binding RelativeSource={RelativeSource
                                                                Mode=TemplatedParent},Path=CurrentLink,Mode=TwoWay}"/>--><!--
                                                            </StackPanel>

                                                            <i:Interaction.Behaviors>
                                                                --><!--<i:DragMoveWindowBehavior/>--><!--
                                                            </i:Interaction.Behaviors>
                                                        </Border>

                                                        --><!--右侧区域--><!--
                                                        <Grid Grid.Column="1">
                                                            <Grid.RowDefinitions>
                                                                <RowDefinition Height="Auto"/>
                                                                <RowDefinition/>
                                                                --><!--<RowDefinition Height="Auto"/>--><!--
                                                            </Grid.RowDefinitions>

                                                            <Border BorderBrush="{DynamicResource S.Brush.TextBorderBrush.Default}" Background="{DynamicResource S.Brush.TextBackground.Default}" BorderThickness="0,0,0,1" CornerRadius="{DynamicResource S.Window.Item.CornerRadius.RightTop}">
                                                                --><!--<Border.Effect>
                                                                    <DropShadowEffect Color="Black" BlurRadius="10" ShadowDepth="0"></DropShadowEffect>
                                                                </Border.Effect>--><!--
                                                            </Border>

                                                            --><!--右侧抬头--><!--
                                                            <Grid  x:Name="PART_TITLEGRID" Background="Transparent" Height="{TemplateBinding CaptionHeight}" Margin="0,2,2,0">

                                                                --><!--隐藏菜单按钮--><!--
                                                                <ToggleButton  Content="&#xeb3a;"  Style="{DynamicResource S.ToggleButton.DoubleFIconChecked}" 
                                              IsTabStop="False" h:Cattach.FIconSize="35" IsChecked="true"
                                                          h:Cattach.FIcon="&#xe9ce;" HorizontalAlignment="Left" Margin="10,0"     
                                              h:Cattach.AllowsAnimation="{Binding RelativeSource={RelativeSource Mode=Self},Path=IsChecked}">
                                                                    <i:Interaction.Triggers>
                                                                        <i:EventTrigger EventName="Checked">
                                                                            <i:InvokeCommandAction Command="{x:Static local:CommandService.VisibleOfMarginLeftCommand}" CommandParameter="{Binding ElementName=sp_left}"/>
                                                                        </i:EventTrigger>

                                                                        <i:EventTrigger EventName="Unchecked">
                                                                            <i:InvokeCommandAction Command="{x:Static s:CommandService.CollapsedOfMarginLeftCommand}" CommandParameter="{Binding ElementName=sp_left}"/>
                                                                        </i:EventTrigger>
                                                                    </i:Interaction.Triggers>
                                                                </ToggleButton>

                                                                --><!--工具按钮--><!--
                                                                <StackPanel  Orientation="Horizontal" VerticalAlignment="Center" Margin="10,0"  HorizontalAlignment="Right">
                                                                    <StackPanel.Resources>
                                                                        <Style TargetType="{x:Type local:FButton}" BasedOn="{StaticResource S.FButton.Style.Transparent}">
                                                                            <Setter  Property="Margin" Value="10,0"/>
                                                                            <Setter  Property="Width" Value="{DynamicResource S.Window.ItemHeight}"/>
                                                                            <Setter  Property="FIconSize" Value="15"/>
                                                                            <Style.Triggers>
                                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                                    <Setter Property="Opacity" Value="0.6"/>
                                                                                </Trigger>
                                                                            </Style.Triggers>
                                                                        </Style>
                                                                    </StackPanel.Resources>

                                                                    <ToggleButton x:Name="btn_custom"  Width="{DynamicResource S.Window.ItemHeight}"  
                                                                                  VerticalAlignment="Center" Margin="5,0"   ToolTip="用户工具" Foreground="{DynamicResource S.Brush.Orange.Notice}"
                                                                                  Visibility="{Binding Path=SetboxEnable,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}"
                                                                                  Style="{DynamicResource S.ToggleButton.BrushFIconChecked}" h:Cattach.FIcon="&#xe8d4;" 
                                                                                  h:Cattach.FIconSize="25"  h:Cattach.CheckedForegroundBrush="{DynamicResource S.Brush.Accent}"
                                                                                  WindowChrome.IsHitTestVisibleInChrome="True"/>

                                                                    <TextBlock Text="WelCome HeBianGu !" Style="{DynamicResource S.TextBlock.Default}" />

                                                                    <ToggleButton x:Name="btnTheme"  Width="{DynamicResource S.Window.ItemHeight}" 
                                                                                  VerticalAlignment="Center" Margin="15,0"   ToolTip="更换主题颜色" Foreground="{DynamicResource  S.Brush.TextForeground.Default}"
                                                                                  Visibility="{Binding Path=SetboxEnable,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}"
                                                                                  Style="{DynamicResource S.ToggleButton.BrushFIconChecked}" h:Cattach.FIcon="&#xe6d2;"  h:Cattach.FIconSize="25"
                                                                                  WindowChrome.IsHitTestVisibleInChrome="True"/>

                                                                    <Line X1="0" X2="0" Y1="0" Y2="25" Height="25" Stroke="{DynamicResource S.Brush.TextBorderBrush.Default}"/>

                                                                    <local:FButton x:Name="btnMin"  Visibility="{Binding Path=MinboxEnable,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}" FIcon="&#xe61d;"  Command="{Binding Path=MinimizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>

                                                                    <local:FButton x:Name="btnMax" Command="{Binding Path=MaximizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>

                                                                    <local:FButton x:Name="btnClose" Width="{DynamicResource S.Window.Item.Height}" Margin="10,0" FIconSize="15"
                                                                                   MouseOverBackground="Red" MouseOverForeground="{DynamicResource S.Brush.TextForeground.White}"  
                                                                                   PressedForeground="{DynamicResource S.Brush.TextForeground.White}"
                                                                                   AllowsAnimation="True"  FIcon="&#xe6f4;" Style="{DynamicResource S.FButton.Style.Transparent}"
                                                                                   Command="{Binding Path=CloseWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                </StackPanel>

                                                            </Grid>

                                                            --><!--<local:Row Grid.Row="2" Style="{DynamicResource S.Row.Column.1}" Background="{DynamicResource S.Brush.Dark.2}">
                                                                <TextBlock Text="Copyright ©  2019 By HeBianGu" Foreground="{DynamicResource S.Brush.TextForeground.Default}" HorizontalAlignment="Center" VerticalAlignment="Top"/>
                                                            </local:Row>--><!--

                                                            <Border Margin="15,10,15,10" Grid.Row="1" BorderBrush="{DynamicResource S.Brush.TextBorderBrush.Default}" Background="{DynamicResource S.Brush.TextBackground.Default}" CornerRadius="5"
                                                                    Effect="{DynamicResource S.EffectShadow.3}">
                                                            </Border>

                                                            <local:LinkActionFrame Grid.Row="1" Margin="15,10" BorderThickness="0,0,0,0" LinkAction="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=CurrentLink,Mode=TwoWay}"/>

                                                            --><!--<local:LinkActionTabFrame Grid.Row="1" Margin="15,10" BorderThickness="0,0,0,0" LinkAction="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=CurrentLink,Mode=TwoWay}"/>-->

                                                            <!--<local:LinkActionFrame x:Name="PART_LinkActionFrame"  Visibility="Collapsed"  UseRandomWipe="True" Grid.Row="1" Grid.RowSpan="2"/>-->

                                                            <!--蒙版--><!--
                                                            <local:ContainPanel Background="{DynamicResource S.Brush.Dialog.Cover}" Grid.Row="1"  Visibility="Collapsed" x:Name="PART_LAYERGROUP">
                                                                <local:ContainPanel.AnimationAction>
                                                                    <s:ScaleAction/>
                                                                </local:ContainPanel.AnimationAction>
                                                            </local:ContainPanel>

                                                        </Grid>

                                                    </Grid>
                                                </local:DialogHost>

                                                <local:MessageContainer  x:Name="PART_Message"  Grid.Row="1"/>

                                                <local:Snackbar MessageQueue="{local:MessageQueue}" x:Name="PART_SnackBar" />
                                            </Grid>
                                        </local:DrawerHost>
                                    </Grid>
                                </AdornerDecorator>

                                <Popup x:Name="Pop" PopupAnimation="Slide" IsOpen="{Binding ElementName=btnTheme,Path=IsChecked}"
                       PlacementTarget="{Binding ElementName=btnTheme}" Placement="Bottom"
                       AllowsTransparency="True" StaysOpen="False" HorizontalAlignment="Left" VerticalAlignment="Bottom">

                                    <Border Background="{DynamicResource S.Brush.Accent.Opacity.5}" CornerRadius="5" BorderBrush="{DynamicResource S.Brush.Accent}" BorderThickness="1">
                                        <StackPanel Margin="10">
                                            --><!--<local:ThemeSetControl Foreground="{TemplateBinding CaptionForeground}"/>--><!--
                                        </StackPanel>
                                    </Border>
                                </Popup>

                                <Popup x:Name="ppp_custom" PopupAnimation="Slide" IsOpen="{Binding ElementName=btn_custom,Path=IsChecked}" PlacementTarget="{Binding ElementName=btn_custom}" Placement="Bottom" AllowsTransparency="True" StaysOpen="False" HorizontalAlignment="Left" VerticalAlignment="Bottom">

                                    <Border Background="{DynamicResource S.Brush.TextBackground.Default}" CornerRadius="5" BorderBrush="{DynamicResource S.Brush.Accent}" BorderThickness="1">
                                        <StackPanel Margin="10">
                                            <ContentControl Content="{TemplateBinding CustomContent}"/>
                                        </StackPanel>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Grid>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter Property="FIcon" TargetName="btnMax" Value="&#xe665;"></Setter>
                            <Setter Property="Margin" TargetName="g_all" Value="0"></Setter>
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter Property="FIcon" TargetName="btnMax" Value="&#xe615;"></Setter>
                        </Trigger>

                        --><!--淡出动画--><!--
                        <EventTrigger RoutedEvent="Window.Loaded">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{DynamicResource Story.WindowLoad}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>--><!--
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="S.Window.Manager.LinkActions.LeftMenu" TargetType="{x:Type local:LinkActionsManagerWindowBase}" BasedOn="{StaticResource S.Window.Manager.Default}">
        <Setter Property="CaptionHeight" Value="60"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:LinkActionsManagerWindowBase}">
                    <Grid Name="g_all">
                        --><!--背景--><!--
                        <Border x:Name="Bg"
                  CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                  Background="{TemplateBinding Background}"  Margin="{TemplateBinding Padding}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  Effect="{DynamicResource S.DropShadowEffect.Window}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  />

                        --><!--<Border x:Name="BgInner" CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                    Background="{TemplateBinding Background}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>--><!--

                        <Grid   Margin="{TemplateBinding Padding}">
                            --><!--窗体内容区域--><!--
                            <AdornerDecorator Grid.Row="1" WindowChrome.IsHitTestVisibleInChrome="True">
                                <Grid>
                                    --><!--托盘图标--><!--
                                    <local:NotifyIcon x:Name="PART_NotifyIcon"
                                      Icon="{Binding Path=NotifyIconSource,RelativeSource={RelativeSource TemplatedParent}}"
                                      Command="{Binding Path=MinimizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"
                                      Text="{TemplateBinding Title}"
                                      IconVisibility="Visible">

                                        <FrameworkElement.ContextMenu>
                                            <ContextMenu >
                                                <MenuItem Header="显示面板" Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=NotifyWindowCommand}"
                                                          CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>

                                                <MenuItem Header="隐藏"  Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=NotifyWindowCommand}"
                                                          CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>

                                                <MenuItem Header="退出"  Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=CloseWindowCommand}"
                                                          CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                            </ContextMenu>
                                        </FrameworkElement.ContextMenu>
                                    </local:NotifyIcon>

                                    <local:DrawerHost HorizontalContentAlignment="Stretch">
                                        <Grid>
                                            --><!--整体消息弹出--><!--
                                            <local:DialogHost Identifier="windowDialog" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="-3,1,2,1">
                                                <Grid>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="Auto"/>
                                                        <ColumnDefinition/>
                                                    </Grid.ColumnDefinitions>

                                                    --><!--左侧菜单 此处需要绑定 SelectedItem -->
                                                    <!--<local:LeftMenu Style="{DynamicResource S.LeftMenu.Default}" IsExpended="False" CornerRadius="{DynamicResource S.Window.Item.CornerRadius.Left}" ItemsSource="{TemplateBinding LinkActions}" SelectedItem="{Binding RelativeSource={RelativeSource
                                                                Mode=TemplatedParent},Path=CurrentLink,Mode=TwoWay}">
                                                        <h:Interaction.Behaviors>
                                                            <h:DragMoveWindowBehavior/>
                                                        </h:Interaction.Behaviors>
                                                    </local:LeftMenu>-->
                                                    <!--右侧区域--><!--
                                                    <Grid Grid.Column="1" Margin="0,1,0,1">
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="Auto"/>
                                                            <RowDefinition/>
                                                        </Grid.RowDefinitions>

                                                        <Border BorderBrush="{DynamicResource S.Brush.TextBorderBrush.Default}" Background="{DynamicResource S.Brush.TextBackground.Default}" BorderThickness="0,0,0,1" CornerRadius="{DynamicResource S.Window.Item.CornerRadius.RightTop}"/>

                                                        --><!--右侧抬头--><!--
                                                        <Grid  x:Name="PART_TITLEGRID" Background="Transparent" Height="{TemplateBinding CaptionHeight}" Margin="0,2,2,0">
                                                            --><!--工具按钮--><!--
                                                            <StackPanel  Orientation="Horizontal" VerticalAlignment="Center" Margin="10,0"  HorizontalAlignment="Right">
                                                                <StackPanel.Resources>
                                                                    <Style TargetType="{x:Type local:FButton}" BasedOn="{StaticResource S.FButton.Style.Transparent}">
                                                                        <Setter  Property="Margin" Value="10,0"/>
                                                                        <Setter  Property="Width" Value="{DynamicResource S.Window.ItemHeight}"/>
                                                                        <Setter  Property="FIconSize" Value="15"/>
                                                                        <Style.Triggers>
                                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                                <Setter Property="Opacity" Value="0.6"/>
                                                                            </Trigger>
                                                                        </Style.Triggers>
                                                                    </Style>
                                                                </StackPanel.Resources>

                                                                <ToggleButton x:Name="btn_custom"  Width="{DynamicResource S.Window.ItemHeight}"  
                                                                                  VerticalAlignment="Center" Margin="5,0"   ToolTip="用户工具" Foreground="{DynamicResource S.Brush.Orange.Notice}"
                                                                                  Visibility="{Binding Path=SetboxEnable,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}"
                                                                                  Style="{DynamicResource S.ToggleButton.BrushFIconChecked}" h:Cattach.FIcon="&#xe8d4;" 
                                                                                  h:Cattach.FIconSize="25"  h:Cattach.CheckedForegroundBrush="{DynamicResource S.Brush.Accent}"
                                                                                  WindowChrome.IsHitTestVisibleInChrome="True"/>

                                                                <TextBlock Text="WelCome HeBianGu !" Style="{DynamicResource S.TextBlock.Default}" />

                                                                <ToggleButton x:Name="btnTheme"  Width="{DynamicResource S.Window.ItemHeight}" 
                                                                                  VerticalAlignment="Center" Margin="15,0"   ToolTip="更换主题颜色" Foreground="{DynamicResource  S.Brush.TextForeground.Default}"
                                                                                  Visibility="{Binding Path=SetboxEnable,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}"
                                                                                  Style="{DynamicResource S.ToggleButton.BrushFIconChecked}" h:Cattach.FIcon="&#xe6d2;"  h:Cattach.FIconSize="25"
                                                                                  WindowChrome.IsHitTestVisibleInChrome="True"/>

                                                                <Line X1="0" X2="0" Y1="0" Y2="25" Height="25" Stroke="{DynamicResource S.Brush.TextBorderBrush.Default}"/>

                                                                <local:FButton x:Name="btnMin"  Visibility="{Binding Path=MinboxEnable,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}" FIcon="&#xe61d;"  Command="{Binding Path=MinimizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>

                                                                <local:FButton x:Name="btnMax" Command="{Binding Path=MaximizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>

                                                                <local:FButton x:Name="btnClose" Width="{DynamicResource S.Window.Item.Height}" Margin="10,0" FIconSize="15"
                                                                                   MouseOverBackground="Red" MouseOverForeground="{DynamicResource S.Brush.TextForeground.White}"  
                                                                                   PressedForeground="{DynamicResource S.Brush.TextForeground.White}"
                                                                                   AllowsAnimation="True"  FIcon="&#xe6f4;" Style="{DynamicResource S.FButton.Style.Transparent}"
                                                                                   Command="{Binding Path=CloseWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>
                                                            </StackPanel>

                                                        </Grid>

                                                        <Border Margin="15,10,15,10" Grid.Row="1" Effect="{DynamicResource S.EffectShadow.3}"
                                                                BorderBrush="{DynamicResource S.Brush.TextBorderBrush.Default}" Background="{DynamicResource S.Brush.TextBackground.Default}" CornerRadius="5">
                                                            
                                                        </Border>

                                                        <local:LinkActionFrame Grid.Row="1" Margin="15,10" BorderThickness="0,0,0,0" LinkAction="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=CurrentLink,Mode=TwoWay}"/>

                                                        --><!--蒙版--><!--
                                                        <local:ContainPanel Background="{DynamicResource S.Brush.Dialog.Cover}" Grid.Row="1"  Visibility="Collapsed" x:Name="PART_LAYERGROUP">
                                                            <local:ContainPanel.AnimationAction>
                                                                <s:ScaleAction/>
                                                            </local:ContainPanel.AnimationAction>
                                                        </local:ContainPanel>
                                                    </Grid>

                                                </Grid>
                                            </local:DialogHost>

                                            <local:MessageContainer  x:Name="PART_Message"  Grid.Row="1"/>

                                            <local:Snackbar MessageQueue="{local:MessageQueue}" x:Name="PART_SnackBar" />
                                        </Grid>
                                    </local:DrawerHost>
                                </Grid>
                            </AdornerDecorator>

                            <Popup x:Name="Pop" PopupAnimation="Slide" IsOpen="{Binding ElementName=btnTheme,Path=IsChecked}"
                       PlacementTarget="{Binding ElementName=btnTheme}" Placement="Bottom"
                       AllowsTransparency="True" StaysOpen="False" HorizontalAlignment="Left" VerticalAlignment="Bottom">

                                <Border Background="{DynamicResource S.Brush.Accent.Opacity.5}" CornerRadius="5" BorderBrush="{DynamicResource S.Brush.Accent}" BorderThickness="1">
                                    <StackPanel Margin="10">
                                        --><!--<local:ThemeSetControl Foreground="{TemplateBinding CaptionForeground}"/>--><!--
                                    </StackPanel>
                                </Border>
                            </Popup>

                            <Popup x:Name="ppp_custom" PopupAnimation="Slide" IsOpen="{Binding ElementName=btn_custom,Path=IsChecked}" PlacementTarget="{Binding ElementName=btn_custom}" Placement="Bottom" AllowsTransparency="True" StaysOpen="False" HorizontalAlignment="Left" VerticalAlignment="Bottom">

                                <Border Background="{DynamicResource S.Brush.TextBackground.Default}" CornerRadius="5" BorderBrush="{DynamicResource S.Brush.Accent}" BorderThickness="1">
                                    <StackPanel Margin="10">
                                        <ContentControl Content="{TemplateBinding CustomContent}"/>
                                    </StackPanel>
                                </Border>
                            </Popup>
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter Property="FIcon" TargetName="btnMax" Value="&#xe665;"></Setter>
                            <Setter Property="Padding" Value="0"></Setter>
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter Property="FIcon" TargetName="btnMax" Value="&#xe615;"></Setter>
                        </Trigger>

                        --><!--淡出动画--><!--
                        <EventTrigger RoutedEvent="Window.Loaded">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{DynamicResource Story.WindowLoad}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>--><!--
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="S.Window.Manager.LinkActionGroup.LeftMenu" TargetType="{x:Type local:LinkGroupsManagerWindowBase}" BasedOn="{StaticResource S.Window.Manager.Default}">
        <Setter Property="CaptionHeight" Value="60"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:LinkGroupsManagerWindowBase}">
                    <Viewbox Stretch="Fill">
                        <Grid Name="g_all" Width="{TemplateBinding ViewBoxWidth}" Height="{TemplateBinding ViewBoxHeight}"  Margin="{TemplateBinding Padding}">
                            --><!--背景--><!--
                            <Border x:Name="Bg"
                  CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  Effect="{DynamicResource S.DropShadowEffect.Window}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  />

                            <Border x:Name="BgInner" CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                    Background="{TemplateBinding Background}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                            <Grid>
                                --><!--窗体内容区域--><!--
                                <AdornerDecorator Grid.Row="1" WindowChrome.IsHitTestVisibleInChrome="True">
                                    <Grid>
                                        --><!--托盘图标--><!--
                                        <local:NotifyIcon x:Name="PART_NotifyIcon"
                                      Icon="{Binding Path=NotifyIconSource,RelativeSource={RelativeSource TemplatedParent}}"
                                      Command="{Binding Path=MinimizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"
                                      Text="{TemplateBinding Title}"
                                      IconVisibility="Visible">

                                            <FrameworkElement.ContextMenu>
                                                <ContextMenu>
                                                <MenuItem Header="显示面板" Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=NotifyWindowCommand}"
                                                          CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>

                                                <MenuItem Header="隐藏"  Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=NotifyWindowCommand}"
                                                          CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                                
                                                <MenuItem Header="退出"  Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=CloseWindowCommand}"
                                                          CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                            </ContextMenu>
                                            </FrameworkElement.ContextMenu>
                                        </local:NotifyIcon>

                                        <local:DrawerHost HorizontalContentAlignment="Stretch">
                                            <Grid>
                                                --><!--整体消息弹出--><!--
                                                <local:DialogHost Identifier="windowDialog" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="-3,1,2,1">
                                                    <Grid>
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="Auto"/>
                                                            <ColumnDefinition/>
                                                        </Grid.ColumnDefinitions>

                                                        --><!--左侧菜单--><!--
                                                        <local:LeftMenu Width="300" Style="{DynamicResource S.LeftMenu.LinkActionGroup.Default}" IsExpended="False" CornerRadius="{DynamicResource S.Window.Item.CornerRadius.Left}" ItemsSource="{TemplateBinding LinkActionGroups}" SelectedLink="{Binding RelativeSource={RelativeSource
                                                                Mode=TemplatedParent},Path=CurrentLink,Mode=TwoWay}">
                                                            <h:Interaction.Behaviors>
                                                                <h:DragMoveWindowBehavior/>
                                                            </h:Interaction.Behaviors>
                                                        </local:LeftMenu>

                                                        --><!--右侧区域--><!--
                                                        <Grid Grid.Column="1" Margin="0,1,0,1">
                                                            <Grid.RowDefinitions>
                                                                <RowDefinition Height="Auto"/>
                                                                <RowDefinition/>
                                                            </Grid.RowDefinitions>

                                                            <Border BorderBrush="{DynamicResource S.Brush.TextBorderBrush.Default}" Background="{DynamicResource S.Brush.TextBackground.Default}" BorderThickness="0,0,0,1" CornerRadius="{DynamicResource S.Window.Item.CornerRadius.RightTop}"/>

                                                            --><!--右侧抬头--><!--
                                                            <Grid  x:Name="PART_TITLEGRID" Background="Transparent" Height="{TemplateBinding CaptionHeight}" Margin="0,2,2,0">
                                                                --><!--工具按钮--><!--
                                                                <StackPanel  Orientation="Horizontal" VerticalAlignment="Center" Margin="10,0"  HorizontalAlignment="Right">
                                                                    <StackPanel.Resources>
                                                                        <Style TargetType="{x:Type local:FButton}" BasedOn="{StaticResource S.FButton.Style.Transparent}">
                                                                            <Setter  Property="Margin" Value="10,0"/>
                                                                            <Setter  Property="Width" Value="{DynamicResource S.Window.ItemHeight}"/>
                                                                            <Setter  Property="FIconSize" Value="15"/>
                                                                            <Style.Triggers>
                                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                                    <Setter Property="Opacity" Value="0.6"/>
                                                                                </Trigger>
                                                                            </Style.Triggers>
                                                                        </Style>
                                                                    </StackPanel.Resources>

                                                                    <ToggleButton x:Name="btn_custom"  Width="{DynamicResource S.Window.ItemHeight}"  
                                                                                  VerticalAlignment="Center" Margin="5,0"   ToolTip="用户工具" Foreground="{DynamicResource S.Brush.Orange.Notice}"
                                                                                  Visibility="{Binding Path=SetboxEnable,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}"
                                                                                  Style="{DynamicResource S.ToggleButton.BrushFIconChecked}" h:Cattach.FIcon="&#xe8d4;" 
                                                                                  h:Cattach.FIconSize="25"  h:Cattach.CheckedForegroundBrush="{DynamicResource S.Brush.Accent}"
                                                                                  WindowChrome.IsHitTestVisibleInChrome="True"/>

                                                                    <TextBlock Text="WelCome HeBianGu !" Style="{DynamicResource S.TextBlock.Default}" />

                                                                    <ToggleButton x:Name="btnTheme"  Width="{DynamicResource S.Window.ItemHeight}" 
                                                                                  VerticalAlignment="Center" Margin="15,0"   ToolTip="更换主题颜色" Foreground="{DynamicResource  S.Brush.TextForeground.Default}"
                                                                                  Visibility="{Binding Path=SetboxEnable,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}"
                                                                                  Style="{DynamicResource S.ToggleButton.BrushFIconChecked}" h:Cattach.FIcon="&#xe6d2;"  h:Cattach.FIconSize="25"
                                                                                  WindowChrome.IsHitTestVisibleInChrome="True"/>

                                                                    <Line X1="0" X2="0" Y1="0" Y2="25" Height="25" Stroke="{DynamicResource S.Brush.TextBorderBrush.Default}"/>

                                                                    <local:FButton x:Name="btnMin"  Visibility="{Binding Path=MinboxEnable,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}" FIcon="&#xe61d;"  Command="{Binding Path=MinimizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>

                                                                    <local:FButton x:Name="btnMax" Command="{Binding Path=MaximizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>

                                                                    <local:FButton x:Name="btnClose" Width="{DynamicResource S.Window.Item.Height}" Margin="10,0" FIconSize="15"
                                                                                   MouseOverBackground="Red" MouseOverForeground="{DynamicResource S.Brush.TextForeground.White}"  
                                                                                   PressedForeground="{DynamicResource S.Brush.TextForeground.White}"
                                                                                   AllowsAnimation="True"  FIcon="&#xe6f4;" Style="{DynamicResource S.FButton.Style.Transparent}"
                                                                                   Command="{Binding Path=CloseWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                </StackPanel>

                                                            </Grid>

                                                            <Border Margin="15,10,15,10" Effect="{DynamicResource S.EffectShadow.3}" Grid.Row="1" BorderBrush="{DynamicResource S.Brush.TextBorderBrush.Default}" Background="{DynamicResource S.Brush.TextBackground.Default}" CornerRadius="5">
                                                                
                                                            </Border>

                                                            --><!--<local:LinkActionFrame Grid.Row="1" Margin="15,10" BorderThickness="0,0,0,0" LinkAction="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=CurrentLink,Mode=TwoWay}"/>-->

                                                            <!--蒙版--><!--
                                                            <local:ContainPanel Background="{DynamicResource S.Brush.Dialog.Cover}" Grid.Row="1"  Visibility="Collapsed" x:Name="PART_LAYERGROUP">
                                                                <local:ContainPanel.AnimationAction>
                                                                    <s:ScaleAction/>
                                                                </local:ContainPanel.AnimationAction>
                                                            </local:ContainPanel>

                                                            --><!--<local:SwtichTransitioner  x:Name="PART_LAYERGROUP_2"  Visibility="Collapsed" Grid.Row="1" Grid.RowSpan="2"
                                                       HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                                <local:SwtichTransitioner.Background>
                                                                    <SolidColorBrush Color="#000000" Opacity="0.5"/>
                                                                </local:SwtichTransitioner.Background>
                                                                <local:SwtichTransitioner.ITransitionWipe>
                                                                    <local:SlideOutScale/>
                                                                </local:SwtichTransitioner.ITransitionWipe>
                                                            </local:SwtichTransitioner>--><!--
                                                        </Grid>

                                                    </Grid>
                                                </local:DialogHost>

                                                <local:MessageContainer  x:Name="PART_Message"  Grid.Row="1"/>

                                                <local:Snackbar MessageQueue="{local:MessageQueue}" x:Name="PART_SnackBar" />
                                            </Grid>
                                        </local:DrawerHost>
                                    </Grid>
                                </AdornerDecorator>

                                <Popup x:Name="Pop" PopupAnimation="Slide" IsOpen="{Binding ElementName=btnTheme,Path=IsChecked}"
                       PlacementTarget="{Binding ElementName=btnTheme}" Placement="Bottom"
                       AllowsTransparency="True" StaysOpen="False" HorizontalAlignment="Left" VerticalAlignment="Bottom">

                                    <Border Background="{DynamicResource S.Brush.Accent.Opacity.5}" CornerRadius="5" BorderBrush="{DynamicResource S.Brush.Accent}" BorderThickness="1">
                                        <StackPanel Margin="10">
                                            --><!--<local:ThemeSetControl Foreground="{TemplateBinding CaptionForeground}"/>--><!--
                                        </StackPanel>
                                    </Border>
                                </Popup>

                                <Popup x:Name="ppp_custom" PopupAnimation="Slide" IsOpen="{Binding ElementName=btn_custom,Path=IsChecked}" PlacementTarget="{Binding ElementName=btn_custom}" Placement="Bottom" AllowsTransparency="True" StaysOpen="False" HorizontalAlignment="Left" VerticalAlignment="Bottom">

                                    <Border Background="{DynamicResource S.Brush.TextBackground.Default}" CornerRadius="5" BorderBrush="{DynamicResource S.Brush.Accent}" BorderThickness="1">
                                        <StackPanel Margin="10">
                                            <ContentControl Content="{TemplateBinding CustomContent}"/>
                                        </StackPanel>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Grid>
                    </Viewbox>

                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter Property="FIcon" TargetName="btnMax" Value="&#xe665;"></Setter>
                            <Setter Property="Padding" Value="0"></Setter>
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter Property="FIcon" TargetName="btnMax" Value="&#xe615;"></Setter>
                        </Trigger>

                        --><!--淡出动画--><!--
                        <EventTrigger RoutedEvent="Window.Loaded">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{DynamicResource Story.WindowLoad}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>--><!--
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="S.Window.Manager.Custom" TargetType="{x:Type local:CustomManagerWindowBase}" BasedOn="{StaticResource S.Window.Manager.Default}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomManagerWindowBase}">
                    <Viewbox >
                        <Grid Name="g_all" Width="1920" Height="1055"  Margin="2,0,2,2">
                            --><!--背景--><!--
                            <Border x:Name="Bg"
                  CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  Effect="{DynamicResource S.DropShadowEffect.Window}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  />

                            <Border x:Name="BgInner" CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                    Background="{TemplateBinding Background}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                            <Grid>
                                --><!--窗体内容区域--><!--
                                <AdornerDecorator Grid.Row="1" Margin="1,1,1,1" WindowChrome.IsHitTestVisibleInChrome="True">
                                    <Grid>
                                        --><!--托盘图标--><!--
                                        <local:NotifyIcon x:Name="PART_NotifyIcon"
                                      Icon="{Binding Path=NotifyIconSource,RelativeSource={RelativeSource TemplatedParent}}"
                                      Command="{Binding Path=MinimizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"
                                      Text="{TemplateBinding Title}"
                                      IconVisibility="Visible">

                                            <FrameworkElement.ContextMenu>
                                                <ContextMenu >
                                                    <MenuItem Header="显示面板" />
                                                    <MenuItem Header="退出" />
                                                </ContextMenu>
                                            </FrameworkElement.ContextMenu>
                                        </local:NotifyIcon>

                                        <local:DrawerHost HorizontalContentAlignment="Stretch">
                                            <Grid>
                                                --><!--整体消息弹出--><!--
                                                <local:DialogHost Identifier="windowDialog" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="-3,0,-3,-3">
                                                    <Grid>

                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="Auto"/>
                                                            <ColumnDefinition/>
                                                        </Grid.ColumnDefinitions>


                                                        <Border>
                                                            <Border.Background>
                                                                <ImageBrush ImageSource="/Engine.WpfControl;component/Resources/Cover.png"/>
                                                            </Border.Background>
                                                        </Border>

                                                        --><!--左侧菜单--><!--
                                                        <Border Background="{DynamicResource S.Brush.Accent}" CornerRadius="{DynamicResource S.Window.Item.CornerRadius.Left}">
                                                            <StackPanel x:Name="sp_left"  Width="278">
                                                                --><!--<h:Interaction.Behaviors>
                                                                    --><!--<h:FluidMoveBehavior AppliesTo="Self" Duration="00:00:01"  FloatAbove="True"/>-->
                                                                    <!--<h:LoadAnimationBehavior IsUseAll="True" LoadAnimationType="Opactiy" StartValue="0" EndValue="1" Split="0.05" End="0.2"/>--><!--
                                                                    <h:LoadAnimationBehavior IsUseAll="True" LoadAnimationType="VerticalAlignment" StartValue="1000" EndValue="0" End="1" Split="0.2"/>
                                                                </h:Interaction.Behaviors>--><!--

                                                                <Image Width="150" Height="{TemplateBinding CaptionHeight}" Source="{TemplateBinding Logo}" HorizontalAlignment="Center" VerticalAlignment="Center" />

                                                                --><!--<local:LinkGroupExpander Style="{DynamicResource S.LinkGroupExpander.Accent}"
                                                        ItemsSource="{TemplateBinding LinkActionGroups}" SelectedLink="{Binding RelativeSource={RelativeSource
                                                                Mode=TemplatedParent},Path=CurrentLink,Mode=TwoWay}"/>--><!--

                                                                <ContentControl Content="{TemplateBinding LeftContent}" Background="Green" VerticalAlignment="Stretch"/>
                                                            </StackPanel>

                                                        </Border>

                                                        --><!--右侧区域--><!--
                                                        <Grid Grid.Column="1">
                                                            <Grid.RowDefinitions>
                                                                <RowDefinition Height="Auto"/>
                                                                <RowDefinition/>
                                                                --><!--<RowDefinition Height="Auto"/>--><!--
                                                            </Grid.RowDefinitions>

                                                            <Border BorderBrush="{DynamicResource S.Brush.TextBorderBrush.Default}" Background="{DynamicResource S.Brush.TextBackground.Default}" BorderThickness="0,0,0,1" CornerRadius="{DynamicResource S.Window.Item.CornerRadius.RightTop}">
                                                                --><!--<Border.Effect>
                                                                    <DropShadowEffect Color="Black" BlurRadius="10" ShadowDepth="0"></DropShadowEffect>
                                                                </Border.Effect>--><!--
                                                            </Border>

                                                            --><!--右侧抬头--><!--
                                                            <Grid  x:Name="PART_TITLEGRID" Background="Transparent" Height="{TemplateBinding CaptionHeight}" Margin="0,2,2,0">

                                                                --><!--隐藏菜单按钮--><!--
                                                                <ToggleButton  Content="&#xeb3a;"  Style="{DynamicResource S.ToggleButton.DoubleFIconChecked}" 
                                                                              IsTabStop="False" h:Cattach.FIconSize="35" IsChecked="true"
                                                                              h:Cattach.FIcon="&#xe9ce;" HorizontalAlignment="Left" Margin="10,0"     
                                                                              h:Cattach.AllowsAnimation="{Binding RelativeSource={RelativeSource Mode=Self},Path=IsChecked}">
                                                                    <i:Interaction.Triggers>
                                                                        <i:EventTrigger EventName="Checked">
                                                                            <i:InvokeCommandAction Command="{x:Static s:CommandService.VisibleOfMarginLeftCommand}" CommandParameter="{Binding ElementName=sp_left}"/>
                                                                        </i:EventTrigger>

                                                                        <i:EventTrigger EventName="Unchecked">
                                                                            <i:InvokeCommandAction Command="{x:Static local:CommandService.CollapsedOfMarginLeftCommand}" CommandParameter="{Binding ElementName=sp_left}"/>
                                                                        </i:EventTrigger>
                                                                    </i:Interaction.Triggers>
                                                                </ToggleButton>

                                                                --><!--工具按钮--><!--
                                                                <StackPanel  Orientation="Horizontal" VerticalAlignment="Center" Margin="10,0"  HorizontalAlignment="Right">
                                                                    <StackPanel.Resources>
                                                                        <Style TargetType="{x:Type local:FButton}" BasedOn="{StaticResource S.FButton.Style.Transparent}">
                                                                            <Setter  Property="Margin" Value="10,0"/>
                                                                            <Setter  Property="Width" Value="{DynamicResource S.Window.ItemHeight}"/>
                                                                            <Setter  Property="FIconSize" Value="15"/>
                                                                            <Style.Triggers>
                                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                                    <Setter Property="Opacity" Value="0.6"/>
                                                                                </Trigger>
                                                                            </Style.Triggers>
                                                                        </Style>
                                                                    </StackPanel.Resources>



                                                                    <ToggleButton x:Name="btn_custom"  Width="{DynamicResource S.Window.ItemHeight}"  
                                                                                  VerticalAlignment="Center" Margin="5,0"   ToolTip="用户工具" Foreground="{DynamicResource S.Brush.Orange.Notice}"
                                                                                  Visibility="{Binding Path=SetboxEnable,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}"
                                                                                  Style="{DynamicResource S.ToggleButton.BrushFIconChecked}" h:Cattach.FIcon="&#xe8d4;" 
                                                                                  h:Cattach.FIconSize="25"  h:Cattach.CheckedForegroundBrush="{DynamicResource S.Brush.Accent}"
                                                                                  WindowChrome.IsHitTestVisibleInChrome="True"/>

                                                                    <TextBlock Text="WelCome HeBianGu !" Style="{DynamicResource S.TextBlock.Default}" />

                                                                    <ToggleButton x:Name="btnTheme"  Width="{DynamicResource S.Window.ItemHeight}" 
                                                                                  VerticalAlignment="Center" Margin="15,0"   ToolTip="更换主题颜色" Foreground="{DynamicResource  S.Brush.TextForeground.Default}"
                                                                                  Visibility="{Binding Path=SetboxEnable,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}"
                                                                                  Style="{DynamicResource S.ToggleButton.BrushFIconChecked}" h:Cattach.FIcon="&#xe6d2;"  h:Cattach.FIconSize="25"
                                                                                  WindowChrome.IsHitTestVisibleInChrome="True"/>

                                                                    <Line X1="0" X2="0" Y1="0" Y2="25" Height="25" Stroke="{DynamicResource S.Brush.TextBorderBrush.Default}"/>

                                                                    <local:FButton x:Name="btnMin"  Visibility="{Binding Path=MinboxEnable,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}" FIcon="&#xe61d;"  Command="{Binding Path=MinimizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>

                                                                    <local:FButton x:Name="btnMax" Command="{Binding Path=MaximizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>

                                                                    <local:FButton x:Name="btnClose" Width="{DynamicResource S.Window.Item.Height}" Margin="10,0" FIconSize="15"
                                                                                   MouseOverBackground="Red" MouseOverForeground="{DynamicResource S.Brush.TextForeground.White}"  
                                                                                   PressedForeground="{DynamicResource S.Brush.TextForeground.White}"
                                                                                   AllowsAnimation="True"  FIcon="&#xe6f4;" Style="{DynamicResource S.FButton.Style.Transparent}"
                                                                                   Command="{Binding Path=CloseWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                </StackPanel>

                                                            </Grid>

                                                            --><!--<local:Row Grid.Row="2" Style="{DynamicResource S.Row.Column.1}" Background="{DynamicResource S.Brush.Dark.2}">
                                                                <TextBlock Text="Copyright ©  2019 By HeBianGu" Foreground="{DynamicResource S.Brush.TextForeground.Default}" HorizontalAlignment="Center" VerticalAlignment="Top"/>
                                                            </local:Row>--><!--

                                                            <Border Margin="15,10,15,20" Grid.Row="1" Effect="{DynamicResource S.EffectShadow.3}" BorderBrush="{DynamicResource S.Brush.TextBorderBrush.Default}" Background="{DynamicResource S.Brush.TextBackground.Default}" CornerRadius="5">
                                                                --><!--<Border.Effect>
                                                                    <DropShadowEffect Color="{Binding Source={StaticResource  S.Brush.TextBorderBrush.Default},Path=Color}" BlurRadius="20" Direction="270"></DropShadowEffect>
                                                                </Border.Effect>--><!--
                                                            </Border>

                                                            --><!--<local:LinkActionTabFrame Grid.Row="1" Margin="15,10" BorderThickness="0,0,0,0" LinkAction="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=CurrentLink,Mode=TwoWay}"/>-->

                                                            <!--蒙版--><!--
                                                            <local:ContainPanel Background="{DynamicResource S.Brush.Dialog.Cover}" Grid.Row="1"  Visibility="Collapsed" x:Name="PART_LAYERGROUP">
                                                                <local:ContainPanel.AnimationAction>
                                                                    <s:ScaleAction/>
                                                                </local:ContainPanel.AnimationAction>
                                                            </local:ContainPanel>


                                                        </Grid>

                                                    </Grid>
                                                </local:DialogHost>

                                                <local:MessageContainer  x:Name="PART_Message"  Grid.Row="1"/>

                                                <local:Snackbar MessageQueue="{local:MessageQueue}" x:Name="PART_SnackBar" />
                                            </Grid>
                                        </local:DrawerHost>
                                    </Grid>
                                </AdornerDecorator>

                                <Popup x:Name="Pop" PopupAnimation="Slide" IsOpen="{Binding ElementName=btnTheme,Path=IsChecked}"
                       PlacementTarget="{Binding ElementName=btnTheme}" Placement="Bottom"
                       AllowsTransparency="True" StaysOpen="False" HorizontalAlignment="Left" VerticalAlignment="Bottom">

                                    <Border Background="{DynamicResource S.Brush.Accent.Opacity.5}" CornerRadius="5" BorderBrush="{DynamicResource S.Brush.Accent}" BorderThickness="1">
                                        <StackPanel Margin="10">
                                            --><!--<local:ThemeSetControl Foreground="{TemplateBinding CaptionForeground}"/>--><!--
                                        </StackPanel>
                                    </Border>
                                </Popup>

                                <Popup x:Name="ppp_custom" PopupAnimation="Slide" IsOpen="{Binding ElementName=btn_custom,Path=IsChecked}" PlacementTarget="{Binding ElementName=btn_custom}" Placement="Bottom" AllowsTransparency="True" StaysOpen="False" HorizontalAlignment="Left" VerticalAlignment="Bottom">

                                    <Border Background="{DynamicResource S.Brush.TextBackground.Default}" CornerRadius="5" BorderBrush="{DynamicResource S.Brush.Accent}" BorderThickness="1">
                                        <StackPanel Margin="10">
                                            <ContentControl Content="{TemplateBinding CustomContent}"/>
                                        </StackPanel>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Grid>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter Property="FIcon" TargetName="btnMax" Value="&#xe665;"></Setter>
                            <Setter Property="Margin" TargetName="g_all" Value="0"></Setter>
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter Property="FIcon" TargetName="btnMax" Value="&#xe615;"></Setter>
                        </Trigger>

                        --><!--淡出动画--><!--
                        <EventTrigger RoutedEvent="Window.Loaded">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{DynamicResource Story.WindowLoad}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>--><!--
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="S.Window.Manager.Cross" TargetType="{x:Type local:CrossManagerWindowBase}" BasedOn="{StaticResource S.Window.Manager.Default}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="CaptionHeight" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=ActualHeight}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CrossManagerWindowBase}">
                    <Grid Name="g_all" Background="Transparent">
                        <Border x:Name="Bg"
                  CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                  Background="{TemplateBinding Background}"  Margin="{TemplateBinding Padding}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  Effect="{DynamicResource S.DropShadowEffect.Window}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                        <Grid Clip="{TemplateBinding ContenClip}">
                            --><!--窗体内容区域--><!--
                            <AdornerDecorator Grid.Row="1" WindowChrome.IsHitTestVisibleInChrome="True">
                                <Grid>
                                    --><!--托盘图标--><!--
                                    <local:NotifyIcon x:Name="PART_NotifyIcon"
                                      Icon="{Binding Path=NotifyIconSource,RelativeSource={RelativeSource TemplatedParent}}"
                                      Command="{Binding Path=MinimizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"
                                      Text="{TemplateBinding Title}"
                                      IconVisibility="Visible">

                                        <FrameworkElement.ContextMenu>
                                            <ContextMenu >
                                                <MenuItem Header="显示面板" Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=NotifyWindowCommand}"
                                                          CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>

                                                <MenuItem Header="隐藏"  Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=NotifyWindowCommand}"
                                                          CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>

                                                <MenuItem Header="退出"  Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=CloseWindowCommand}"
                                                          CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                            </ContextMenu>
                                        </FrameworkElement.ContextMenu>
                                    </local:NotifyIcon>

                                    <local:DrawerHost HorizontalContentAlignment="Stretch">
                                        <Grid>

                                            <local:DialogHost Identifier="windowDialog" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                <Grid>
                                                    --><!--内容--><!--
                                                    <local:LinkActionFrame LinkAction="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=CurrentLink,Mode=TwoWay}"/>

                                                    --><!--导航--><!--
                                                    <ListBox Background="Transparent" BorderBrush="Transparent" SelectedIndex="0" 
                                                             SelectedItem="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=CurrentLink}"
                                                             ItemsSource="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=LinkActions}"
                                                             Style="{DynamicResource S.ListBox.Clear}"
                                                             ItemTemplate="{TemplateBinding LinkActionDataTemplate}"
                                                             ItemsPanel="{TemplateBinding ItemsPanel}">
                                                    </ListBox>

                                                    --><!--蒙版--><!--
                                                    <local:ContainPanel Background="{DynamicResource S.Brush.Dialog.Cover}" Grid.Row="1" Visibility="Collapsed" x:Name="PART_LAYERGROUP">
                                                        <local:ContainPanel.AnimationAction>
                                                            <s:ScaleAction/>
                                                        </local:ContainPanel.AnimationAction>
                                                    </local:ContainPanel>
                                                </Grid>
                                            </local:DialogHost>

                                            <local:MessageContainer x:Name="PART_Message"/>

                                            <local:Snackbar MessageQueue="{local:MessageQueue}" x:Name="PART_SnackBar" />
                                        </Grid>


                                    </local:DrawerHost>
                                </Grid>
                            </AdornerDecorator>
                        </Grid>

                        <local:FButton  WindowChrome.IsHitTestVisibleInChrome="True"
                                        Width="60" Height="60" Margin="60" CornerRadius="40"
                                         MouseOverBackground="Red" FIconSize="25"
                                        FIcon="&#xe6f4;" HorizontalAlignment="Right" VerticalAlignment="Top"
                                        Command="{Binding Path=CloseWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"
                                        Style="{DynamicResource S.FButton.Style.MouseOverOpacity}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        --><!--<Trigger Property="WindowState" Value="Maximized">
                            <Setter Property="FIcon" TargetName="btnMax" Value="&#xe665;"></Setter>
                            <Setter Property="Padding" Value="0"></Setter>
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter Property="FIcon" TargetName="btnMax" Value="&#xe615;"></Setter>
                        </Trigger>--><!--
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="S.Window.Manager.Above" TargetType="{x:Type local:AboveManagerWindowBase}" BasedOn="{StaticResource S.Window.Manager.Default}">
        --><!--<Setter Property="CaptionBackground" Value="{DynamicResource S.Brush.Accent.MouseOver.Background}"/>--><!--
        <Setter Property="CaptionHeight" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=ActualHeight}"/>
        --><!--<Setter Property="IsUseBlur" Value="True"/>-->
        <!--<Setter Property="CaptionForeground" Value="{DynamicResource S.Brush.TextForeground.White}"/>--><!--
        <Setter Property="Background" Value="{DynamicResource S.Brush.TextBackground.Default}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:AboveManagerWindowBase}">
                    <Grid Name="g_all" Background="Transparent">
                        <Border x:Name="Bg"
                  CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                  Background="{TemplateBinding Background}"  Margin="{TemplateBinding Padding}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  Effect="{DynamicResource S.DropShadowEffect.Window}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                        <Grid Margin="{TemplateBinding Padding}">
                            --><!--窗体内容区域--><!--
                            <AdornerDecorator Grid.Row="1" WindowChrome.IsHitTestVisibleInChrome="True">
                                <Grid>
                                    --><!--托盘图标--><!--
                                    <local:NotifyIcon x:Name="PART_NotifyIcon"
                                      Icon="{Binding Path=NotifyIconSource,RelativeSource={RelativeSource TemplatedParent}}"
                                      Command="{Binding Path=MinimizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"
                                      Text="{TemplateBinding Title}"
                                      IconVisibility="Visible">

                                        <FrameworkElement.ContextMenu>
                                            <ContextMenu >
                                                <MenuItem Header="显示面板" Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=NotifyWindowCommand}"
                                                          CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>

                                                <MenuItem Header="隐藏"  Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=NotifyWindowCommand}"
                                                          CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>

                                                <MenuItem Header="退出"  Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=CloseWindowCommand}"
                                                          CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                            </ContextMenu>
                                        </FrameworkElement.ContextMenu>
                                    </local:NotifyIcon>

                                    --><!--<local:DrawerHost HorizontalContentAlignment="Stretch">
                                        <Grid >

                                            <local:DialogHost Identifier="windowDialog" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">

                                                <Grid ClipToBounds="False" Effect="{TemplateBinding AdornerDecoratorEffect}">
                                                    <ScrollViewer>
                                                        <i:Interaction.Triggers>
                                                            <i:EventTrigger EventName="Loaded">
                                                                <h:InvokeRandomSplitAnimationAction SplitMilliSecond="-700" IsUseAll="True">
                                                                    <h:InvokeRandomSplitAnimationAction.Timelines>
                                                                        <cl:ArrayList>
                                                                            --><!--<h:RandomDoubleAnimation Duration="00:00:01" From="0" To="1"  Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"/>
                                                                            <h:RandomDoubleAnimation Duration="00:00:01" From="0" To="1"  Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"/>
                                                                            <h:RandomDoubleAnimation Duration="00:00:01" UseFrom="True" Min="0" Max="1440" To="0"  Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"/>
                                                                            <h:RandomDoubleAnimation Duration="00:00:01" UseFrom="True" Min="-720" Max="720" To="0"  Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)"/>--><!--

                                                                            <h:RandomDoubleAnimation Duration="00:00:01" UseFrom="True" UseTo="False" Max="800" Min="-800" To="0"  Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)"/>
                                                                            <h:RandomDoubleAnimation Duration="00:00:01" From="0" To="1"  Storyboard.TargetProperty="Opacity"/>

                                                                        </cl:ArrayList>
                                                                    </h:InvokeRandomSplitAnimationAction.Timelines>
                                                                </h:InvokeRandomSplitAnimationAction>
                                                            </i:EventTrigger>
                                                        </i:Interaction.Triggers>

                                                        <ItemsControl ItemsSource="{TemplateBinding LinkActionGroups}">
                                                            <ItemsControl.ItemTemplate>
                                                                <DataTemplate DataType="{x:Type h:LinkActionGroup}">
                                                                    <GroupBox Header="{Binding DisplayName}" h:Cattach.FIconSize="20" FontSize="{DynamicResource S.FontSize.Header.2}" Style="{DynamicResource S.GroupBox.UnderLine}" Background="Transparent">
                                                                        <h:Interaction.Behaviors>
                                                                            <h:DragMoveWindowBehavior/>
                                                                        </h:Interaction.Behaviors>

                                                                        --><!--导航--><!--
                                                                        <ListBox Background="Transparent" BorderBrush="Transparent"
                                                             SelectedItem="{Binding RelativeSource={RelativeSource AncestorType=local:AboveManagerWindowBase},Path=CurrentLink}"
                                                             ItemsSource="{Binding Links}"
                                                             Style="{DynamicResource S.ListBox.Clear}"
                                                             ItemTemplate="{Binding RelativeSource={RelativeSource AncestorType=local:AboveManagerWindowBase},Path=LinkActionDataTemplate}"
                                                             ItemsPanel="{Binding RelativeSource={RelativeSource AncestorType=local:AboveManagerWindowBase},Path=ItemsPanel}">

                                                                            <h:Interaction.Triggers>
                                                                                <h:EventTrigger EventName="SelectionChanged">
                                                                                    <h:ChangePropertyAction TargetObject="{Binding RelativeSource={RelativeSource AncestorType=local:AboveManagerWindowBase}}" PropertyName="IsboveState" Value="true"/>
                                                                                </h:EventTrigger>

                                                                                <h:EventTrigger EventName="Loaded">
                                                                                    <h:InvokeTimeSplitAnimationAction SplitMilliSecond="-700">
                                                                                        <h:InvokeTimeSplitAnimationAction.Timelines>
                                                                                            <cl:ArrayList>
                                                                                                <DoubleAnimation Duration="00:00:01" From="300" To="0"  Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)"/>
                                                                                                <DoubleAnimation Duration="00:00:01" From="0" To="1"  Storyboard.TargetProperty="Opacity"/>
                                                                                            </cl:ArrayList>
                                                                                        </h:InvokeTimeSplitAnimationAction.Timelines>
                                                                                    </h:InvokeTimeSplitAnimationAction>
                                                                                </h:EventTrigger>
                                                                            </h:Interaction.Triggers>

                                                                            <ListBox.ItemContainerStyle>
                                                                                <Style TargetType="ListBoxItem">
                                                                                    <Setter Property="RenderTransform" Value="{StaticResource S.TransformGroup.Default}"/>
                                                                                    <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                                                                                    <Setter Property="Template">
                                                                                        <Setter.Value>
                                                                                            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                                                                <Border x:Name="boder">
                                                                                                    <ContentPresenter/>
                                                                                                </Border>
                                                                                            </ControlTemplate>
                                                                                        </Setter.Value>
                                                                                    </Setter>
                                                                                </Style>
                                                                            </ListBox.ItemContainerStyle>
                                                                        </ListBox>
                                                                    </GroupBox>
                                                                </DataTemplate>
                                                            </ItemsControl.ItemTemplate>
                                                        </ItemsControl>
                                                    </ScrollViewer>

                                                    --><!--内容--><!--
                                                    <Grid Visibility="Collapsed"  h:Cattach.IsVisible="{TemplateBinding IsboveState}">
                                                        <h:Cattach.VisibleActions>
                                                            <h:ScaleAction/>
                                                        </h:Cattach.VisibleActions>

                                                        --><!--<local:LinkActionFrame LinkAction="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=CurrentLink,Mode=TwoWay}"/>--><!--
                                                        <GroupBox Style="{DynamicResource S.GroupBox.UnderLine}" FontSize="{DynamicResource S.FontSize.Header.2}"
                                                                  h:Cattach.FIcon="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=CurrentLink.Logo}"
                                                                  h:Cattach.FIconSize="20"
                                                                  Header="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=CurrentLink.DisplayName}">
                                                            <h:Interaction.Behaviors>
                                                                <h:DragMoveWindowBehavior/>
                                                            </h:Interaction.Behaviors>

                                                            <local:LinkActionPanel LinkAction="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=CurrentLink}"/>
                                                        </GroupBox>

                                                        --><!--<Border Background="{DynamicResource S.Brush.TextBackground.Default}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding h:Cattach.CornerRadius}">
                                                            <local:LinkActionPanel  LinkAction="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=CurrentLink,Mode=TwoWay}"/>
                                                        </Border>--><!--


                                                        <Button Style="{DynamicResource S.Button.Close.MouseOver}" Margin="10">
                                                            <h:Interaction.Triggers>
                                                                <h:EventTrigger EventName="Click">
                                                                    --><!--<h:ChangePropertyAction TargetName="cb" PropertyName="IsChecked" Value="false"/>
                                                                    <h:ChangePropertyAction TargetName="btn_close_window" PropertyName="Visibility" Value="Visible"/>--><!--
                                                                    <h:ChangePropertyAction TargetObject="{Binding RelativeSource={RelativeSource AncestorType=local:AboveManagerWindowBase}}" PropertyName="CurrentLink" Value="{x:Null}"/>

                                                                    <h:ChangePropertyAction TargetObject="{Binding RelativeSource={RelativeSource AncestorType=local:AboveManagerWindowBase}}" PropertyName="IsboveState" Value="false"/>
                                                                </h:EventTrigger>
                                                            </h:Interaction.Triggers>
                                                        </Button>
                                                    </Grid>

                                                    --><!--蒙版--><!--
                                                    <local:ContainPanel Background="{DynamicResource S.Brush.Dialog.Cover}" Grid.Row="1"  Visibility="Collapsed" x:Name="PART_LAYERGROUP">
                                                        <local:ContainPanel.AnimationAction>
                                                            <h:ScaleAction/>
                                                        </local:ContainPanel.AnimationAction>
                                                    </local:ContainPanel>
                                                </Grid>
                                            </local:DialogHost>

                                            <local:MessageContainer x:Name="PART_Message"/>

                                            <local:Snackbar MessageQueue="{local:MessageQueue}" x:Name="PART_SnackBar" />
                                        </Grid>
                                    </local:DrawerHost>--><!--
                                </Grid>
                            </AdornerDecorator>
                        </Grid>

                        <local:FButton x:Name="btn_close_window" WindowChrome.IsHitTestVisibleInChrome="True"
                                        Width="60" Height="60" Margin="0" CornerRadius="40"
                                        MouseOverBackground="Red" FIconSize="25"
                                       Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=IsboveState,Converter={x:Static h:XConverter.FalseToVisibilityConverter}}"
                                        FIcon="&#xe6f4;" HorizontalAlignment="Right" VerticalAlignment="Top"
                                        Command="{Binding Path=CloseWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"
                                        Style="{DynamicResource S.FButton.Style.MouseOverOpacity}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        --><!--<Trigger Property="WindowState" Value="Maximized">
                            <Setter Property="FIcon" TargetName="btnMax" Value="&#xe665;"></Setter>
                            <Setter Property="Padding" Value="0"></Setter>
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter Property="FIcon" TargetName="btnMax" Value="&#xe615;"></Setter>
                        </Trigger>--><!--
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

</ResourceDictionary>
