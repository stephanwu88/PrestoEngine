<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Engine.WpfControl"
                    xmlns:h="clr-namespace:Engine.WpfBase">

    <!--<ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="WindowBase.xaml"/>
        <ResourceDictionary Source="MainWindowBase.xaml"/>
    </ResourceDictionary.MergedDictionaries>-->

    <!--默认WindowBase的样式-->
    <Style x:Key="S.Window.Blur.Default" TargetType="{x:Type local:BlurWindowBase}" BasedOn="{StaticResource S.Window.Main.Default}">
        <Setter Property="Background" Value="{DynamicResource S.Brush.Accent.MouseOver.Background}"/>
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.Title}"/>
        <Setter Property="FontSize" Value="{DynamicResource S.FontSize.Default}"/>
        <Setter Property="FontFamily" Value="{DynamicResource S.FontFamily.Default}"/>
        <Setter Property="Width" Value="480"/>
        <Setter Property="Height" Value="320"/>
        <Setter Property="BorderBrush" Value="{DynamicResource S.Brush.Accent}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FIconSize" Value="20"/>
        <Setter Property="CaptionHeight" Value="26"/>
        <!--标题栏背景色-->
        <Setter Property="CaptionBackground" Value="{DynamicResource S.Brush.Accent.MouseOver.Background}" />
        <Setter Property="CaptionForeground" Value="{DynamicResource S.Brush.TextForeground.White}" />
        <Setter Property="FIcon" Value="&#xe79c;"/>
        <Setter Property="MaxboxEnable" Value="True"/>
        <Setter Property="MinboxEnable" Value="True"/>
        <Setter Property="Padding" Value="0"/>
        <!--建议内边框=3：ResizeBorderThickness = new Thickness(3);-->
        <!--<Setter Property="Padding" Value="10"/>-->

        <!--默认背景模糊效果-->
        <Setter Property="DefaultBlurEffect">
            <Setter.Value>
                <BlurEffect/>
            </Setter.Value>
        </Setter>
        <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource S.Window.Item.CornerRadius}"/>

        <!--<Setter Property="h:Cattach.VisibleActions">
            <Setter.Value>
                <h:ActionCollection>
                    <h:LinearOpacityMaskAction VisibleDuration="2000" HideDuration="1000" StartPoint="0,0" EndPoint="1,1"  Viewport="0.25 0.1 0.25 0.1"/>
                    -->
        <!--<h:RadialOpacityMaskAction/>-->
        <!--
                </h:ActionCollection>
            </Setter.Value>
        </Setter>-->


        <!--<Setter Property="WindowStyle" Value="None"/>
        <Setter Property="ResizeMode" Value="CanMinimize"/>
        -->
        <!--窗体基本设置 WindowChrome-->
        <!--
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CaptionHeight="{Binding Path=CaptionHeight,RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type local:WindowBase}}}"
                             ResizeBorderThickness="8" GlassFrameThickness="-1"/>
            </Setter.Value>
        </Setter>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:WindowBase}">
                    <Grid Name="g_all">
                        <h:Interaction.Triggers>
                            <h:EventTrigger EventName="Loaded">
                                <h:InvokeCommandAction Command="{Binding LoadedCommand}"/>
                            </h:EventTrigger>
                        </h:Interaction.Triggers>

                        <!--背景-->
                        <Border x:Name="Bg"
                                CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}" Margin="{TemplateBinding Padding}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        </Border>

                        <Border  x:Name="BgInner" CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                     Background="{TemplateBinding Background}"
                     BorderThickness="{TemplateBinding BorderThickness}"
                     SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        </Border>

                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.RowDefinitions>
                                <RowDefinition MinHeight="20" Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <!--Caption标题部分-->
                            <Border  Grid.Row="0" Background="{TemplateBinding CaptionBackground}">
                                <Grid Margin="2,1,2,0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>

                                    <Border Grid.ColumnSpan="2" Grid.RowSpan="2"/>
                                    <!--Header部分-->
                                    <StackPanel x:Name="PART_Header" Height="{TemplateBinding CaptionHeight}" Margin="15,1,15,1" Orientation="Horizontal" VerticalAlignment="Center">
                                        <TextBlock Style="{DynamicResource S.TextBlock.FIcon}" Foreground="{TemplateBinding CaptionForeground}" FontSize="{TemplateBinding FIconSize}" FontWeight="Bold" Text="{TemplateBinding FIcon}"/>
                                        <TextBlock VerticalAlignment="Center" Margin="5" FontSize="{StaticResource S.FontSize.Header}" Foreground="{TemplateBinding CaptionForeground}" Text="{TemplateBinding Title}"/>
                                    </StackPanel>
                                    <!--窗体功能按钮：最小、最大、关闭-->
                                    <StackPanel Grid.Column="1" Orientation="Horizontal" VerticalAlignment="Top" Margin="1" HorizontalAlignment="Right" Height="{TemplateBinding CaptionHeight}">

                                        <!--h:Cattach.FIcon="&#xe6d2;"-->
                                        <ToggleButton x:Name="btnTheme" Width="30" VerticalAlignment="Center" Margin="1"
                                               Visibility="{Binding Path=SetboxEnable,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}"
                                               Style="{DynamicResource S.ToggleButton.BrushFIconChecked}" 
                                               WindowChrome.IsHitTestVisibleInChrome="True" Foreground="{TemplateBinding CaptionForeground}"/>

                                        <local:FButton x:Name="btnMin"  Width="30" VerticalAlignment="Center" Margin="1"
                                               Visibility="{Binding Path=MinboxEnable,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}"
                                               Style="{DynamicResource S.FButton.Style.Transparent}"  FIcon="&#xe61d;" FIconSize="14"
                                               WindowChrome.IsHitTestVisibleInChrome="True" Foreground="{TemplateBinding CaptionForeground}"
                                               Command="{Binding Path=MinimizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>

                                        <local:FButton x:Name="btnMax"  Width="30" VerticalAlignment="Center" Margin="1"
                                               Visibility="{Binding Path=MaxboxEnable,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}"
                                               Style="{DynamicResource S.FButton.Style.Transparent}" FIcon="&#xe665;" FIconSize="14"
                                               WindowChrome.IsHitTestVisibleInChrome="True" Foreground="{TemplateBinding CaptionForeground}"
                                               Command="{Binding Path=MaximizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>

                                        <local:FButton x:Name="btnClose"  Width="35" Height="35" VerticalAlignment="Center" Margin="1" CornerRadius="0" Padding="1 2 1 2"
                                               MouseOverBackground="Red" MouseOverForeground="White" PressedBackground="#AA0D0D" PressedForeground="White"
                                               AllowsAnimation="True" Style="{DynamicResource S.FButton.Style.Transparent}"  FIcon="&#xe6f4;" FIconSize="14"
                                               WindowChrome.IsHitTestVisibleInChrome="True" FIconMargin="0" Foreground="{TemplateBinding CaptionForeground}"
                                               Command="{Binding Path=CloseWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>
                                    </StackPanel>
                                </Grid>
                            </Border>

                            <!--窗体内容区域-->
                            <AdornerDecorator Grid.Row="1" Margin="3,0,3,3">
                                <Grid>
                                    <!--托盘图标-->
                                    <!--<local:NotifyIcon x:Name="PART_NotifyIcon"
                                        Icon="{Binding Path=NotifyIconSource,RelativeSource={RelativeSource TemplatedParent}}"
                                        Command="{Binding Path=MinimizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"
                                        Text="{TemplateBinding Title}"
                                        IconVisibility="Visible">

                                        <FrameworkElement.ContextMenu>
                                            <ContextMenu >
                                                <MenuItem Header="显示面板" Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=NotifyWindowCommand}"
                                                          CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>

                                                <MenuItem Header="隐藏"  Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=NotifyWindowCommand}"
                                                          CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>

                                                <MenuItem Header="退出"  Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=CloseWindowCommand}"
                                                          CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                            </ContextMenu>
                                        </FrameworkElement.ContextMenu>
                                    </local:NotifyIcon>-->

                                    <!--整体消息弹出-->
                                    <!--<local:DialogHost Identifier="windowDialog" Margin="-3,0,-3,-3">
                                        <Grid Effect="{TemplateBinding AdornerDecoratorEffect}">
                                            -->
                                    <!--最底层内容-->
                                    <!--
                                            <ContentPresenter Content="{TemplateBinding Content}" />

                                            -->
                                    <!--蒙版-->
                                    <!--<local:ContainPanel Background="{DynamicResource S.Brush.Dialog.Cover}" Visibility="Collapsed" x:Name="PART_LAYERGROUP">
                                                <local:ContainPanel.AnimationAction>
                                                    <h:ScaleAction/>
                                                </local:ContainPanel.AnimationAction>
                                            </local:ContainPanel>

                                            <local:MessageContainer  x:Name="PART_Message"  Grid.Row="1"/>
                                        </Grid>
                                    </local:DialogHost>-->

                                    <!--<local:Snackbar MessageQueue="{local:MessageQueue}" x:Name="PART_SnackBar" />-->
                                </Grid>
                            </AdornerDecorator>

                            <Popup x:Name="Pop" PopupAnimation="Slide" IsOpen="{Binding ElementName=btnTheme,Path=IsChecked}"  PlacementTarget="{Binding ElementName=btnTheme}" Placement="Top" AllowsTransparency="True" StaysOpen="False" HorizontalAlignment="Left" VerticalAlignment="Bottom">
                                <Border Background="{DynamicResource S.Brush.Accent.Opacity.5}" CornerRadius="5" BorderBrush="{DynamicResource S.Brush.Accent}" BorderThickness="1">
                                    <StackPanel Margin="10">
                                        <!--<local:ThemeSetControl  Foreground="{DynamicResource S.Brush.TextForeground.White}"/>-->
                                    </StackPanel>
                                </Border>
                            </Popup>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter Property="FIcon" TargetName="btnMax" Value="&#xe665;"></Setter>
                            <Setter Property="Margin" TargetName="g_all" Value="0"></Setter>
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter Property="FIcon" TargetName="btnMax" Value="&#xe615;"></Setter>
                        </Trigger>

                        <!--淡出动画-->
                        <!--
                        <EventTrigger RoutedEvent="Window.Loaded">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{DynamicResource Story.WindowLoad}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
